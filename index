<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crypto Tools - Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #2196F3;
            --secondary: #1976D2;
            --accent-red: #C62828;
            --accent-green: #2E7D32;
            --accent-orange: #FF6D00;
            --dark: #121212;
            --light: #ffffff;
            --success-color: #03DAC6;
            --warning-color: #FFA000;
            --teal-accent: #4CAF50;
            --green-gradient-start: #4CAF50;
            --green-gradient-end: #2E7D32;
            --red-gradient-start: #F44336;
            --red-gradient-end: #C62828;
            --border-radius: 12px;
        }

        body {
            font-family: 'JetBrains Mono', monospace;
            background-color: var(--dark);
            color: var(--light);
        }

        .alert-card {
            transition: all 0.3s ease;
            border-left: 4px solid var(--primary);
            background-color: #1E1E1E;
        }

        .alert-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 15px -3px rgba(33, 150, 243, 0.2);
        }

        .alert-card.triggered {
            animation: pulse-alert 2s infinite;
        }

        @keyframes pulse-alert {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .btn-primary {
            background-color: var(--primary);
            transition: all 0.3s ease;
            color: white;
            font-weight: 600;
        }

        .btn-primary:hover {
            background-color: var(--secondary);
            transform: translateY(-2px);
            box-shadow: 0 10px 15px -3px rgba(33, 150, 243, 0.3);
        }

        .price-up {
            color: var(--accent-green);
        }

        .price-down {
            color: var(--accent-red);
        }

        .search-highlight {
            background-color: rgba(33, 150, 243, 0.3);
            color: var(--light);
            padding: 0 2px;
            border-radius: 2px;
        }

        .pulse {
            animation: pulse 1.5s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        input, select {
            background-color: #2D2D2D;
            border: 1px solid #3D3D3D;
            color: var(--light);
            font-family: 'JetBrains Mono', monospace;
        }

        input:focus, select:focus {
            border-color: var(--primary);
            outline: none;
            box-shadow: 0 0 0 2px rgba(33, 150, 243, 0.2);
        }

        input[type="checkbox"] {
            accent-color: var(--primary);
        }

        .card {
            background-color: #1E1E1E;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        nav {
            background-color: #1E1E1E;
            border-bottom: 1px solid #2D3D3D;
        }

        footer {
            background-color: #1E1E1E;
            border-top: 1px solid #2D3D3D;
        }

        .connection-status {
            display: flex;
            align-items: center;
            font-size: 0.875rem;
        }

        .status-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
            position: relative;
        }

        .status-dot::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            animation: pulse 1.5s infinite;
        }

        .status-connecting {
            background-color: #fbbf24;
        }

        .status-connecting::before {
            background-color: #fbbf24;
        }

        .status-connected {
            background-color: #22c55e;
        }

        .status-disconnected {
            background-color: #ef4444;
        }

        .status-error {
            background-color: #ef4444;
        }

        .alert-filter-btn {
            transition: all 0.2s ease;
        }

        .alert-filter-btn.active {
            background-color: var(--primary);
            color: white;
        }

        .alerts-container {
            max-height: 500px;
            overflow-y: auto;
        }

        .alerts-container::-webkit-scrollbar {
            width: 6px;
        }

        .alerts-container::-webkit-scrollbar-track {
            background: #1E1E1E;
        }

        .alerts-container::-webkit-scrollbar-thumb {
            background: #444;
            border-radius: 3px;
        }

        .alerts-container::-webkit-scrollbar-thumb:hover {
            background: #555;
        }

        .no-scrollbar::-webkit-scrollbar {
            display: none;
        }

        .no-scrollbar {
            -ms-overflow-style: none;
            scrollbar-width: none;
        }

        .compact-alerts-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .compact-alerts-title {
            font-size: 1.25rem;
            font-weight: bold;
            color: var(--primary);
            white-space: nowrap;
            margin-right: 0.5rem;
        }

        .compact-filters {
            display: flex;
            gap: 0.25rem;
            overflow-x: auto;
            flex: 1;
        }

        .compact-filter-btn {
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
            border-radius: 0.375rem;
            white-space: nowrap;
        }

        .compact-clear-btn {
            font-size: 0.75rem;
            color: var(--accent-red);
            white-space: nowrap;
            margin-left: 0.5rem;
        }

        .edit-modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
        }

        .edit-modal.active {
            opacity: 1;
            pointer-events: all;
        }

        .edit-modal-content {
            background-color: #1E1E1E;
            border-radius: 8px;
            padding: 24px;
            width: 100%;
            max-width: 500px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .alert-direction {
            font-size: 1.8rem;
            margin-left: 0.5rem;
            vertical-align: middle;
        }

        .alert-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            width: 100%;
        }

        .alert-price {
            display: flex;
            align-items: center;
        }

        .spot-badge {
            background-color: var(--accent-orange);
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-size: 0.75rem;
            margin-left: 0.5rem;
        }

        .futures-badge {
            background-color: var(--primary);
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-size: 0.75rem;
            margin-left: 0.5rem;
        }

        .new-badge {
            background-color: var(--accent-green);
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-size: 0.75rem;
            margin-left: 0.5rem;
        }

        .market-type-hint {
            position: absolute;
            right: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            pointer-events: none;
        }

        .current-price-container {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-top: 0.5rem;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-size: 0.875rem;
            background-color: rgba(30, 30, 30, 0.8);
        }

        .current-price-label {
            color: #6B7280;
        }

        .current-price-value {
            color: var(--primary);
            font-weight: 500;
        }

        .apply-price-btn {
            color: var(--primary);
            cursor: pointer;
            transition: color 0.2s;
            font-size: 0.75rem;
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .apply-price-btn:hover {
            color: var(--secondary);
        }

        .validation-error {
            border-color: var(--accent-red) !important;
        }

        .validation-message {
            color: var(--accent-red);
            font-size: 0.75rem;
            margin-top: 0.25rem;
            display: none;
        }

        .connection-status.connected .status-dot {
            background-color: #10B981;
            animation: pulse-green 1.5s infinite;
        }

        .connection-status.error .status-dot {
            background-color: #EF4444;
            animation: pulse-red 1.5s infinite;
        }

        @keyframes pulse-green {
            0% {
                box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.5);
            }
            70% {
                box-shadow: 0 0 0 10px rgba(16, 185, 129, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(16, 185, 129, 0);
            }
        }

        @keyframes pulse-red {
            0% {
                box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.5);
            }
            70% {
                box-shadow: 0 0 0 10px rgba(239, 68, 68, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(239, 68, 68, 0);
            }
        }

        /* Tooltip styles */
        .tooltip {
            position: relative;
            display: inline-block;
        }

        .tooltip .tooltiptext {
            visibility: hidden;
            width: 300px;
            background-color: #333;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 10px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 0.8rem;
            line-height: 1.4;
        }

        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }

        /* Notification methods styles */
        .notification-methods {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-top: 0.5rem;
        }

        .notification-method {
            display: flex;
            align-items: center;
            position: relative;
        }

        .telegram-hint {
            position: absolute;
            bottom: -20px;
            left: 0;
            font-size: 0.75rem;
            color: #6B7280;
        }

        /* Menu styles */
        .menu-container {
            position: relative;
            display: inline-block;
        }

        .menu-button {
            background-color: transparent;
            color: white;
            border: none;
            cursor: pointer;
            padding: 8px 12px;
            font-size: 16px;
            display: flex;
            align-items: center;
        }

        .menu-button:hover {
            color: var(--primary);
        }

        .menu-content {
            display: none;
            position: absolute;
            right: 0;
            background-color: #1E1E1E;
            min-width: 200px;
            box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
            z-index: 1;
            border-radius: 4px;
            border: 1px solid #3D3D3D;
        }

        .menu-content.show {
            display: block;
        }

        .menu-item {
            color: white;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
            text-align: left;
            transition: background-color 0.3s;
        }

        .menu-item:hover {
            background-color: #2D2D2D;
            color: var(--primary);
        }

        .menu-divider {
            height: 1px;
            background-color: #3D3D3D;
            margin: 4px 0;
        }

        .auth-buttons {
            display: flex;
            gap: 8px;
            margin-left: auto;
        }

        .auth-button {
            padding: 6px 12px;
            border-radius: 4px;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .login-button {
            background-color: transparent;
            color: white;
            border: 1px solid #3D3D3D;
        }

        .login-button:hover {
            background-color: rgba(33, 150, 243, 0.1);
            border-color: var(--primary);
        }

        .register-button {
            background-color: var(--primary);
            color: white;
            border: 1px solid var(--primary);
        }

        .register-button:hover {
            background-color: var(--secondary);
            border-color: var(--secondary);
        }

        /* History badge styles */
        .history-badge {
            background-color: #6B7280;
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-size: 0.75rem;
            margin-left: 0.5rem;
        }

        /* Input group styles for login/register forms */
        .input-group {
            margin-bottom: 1rem;
        }

        .input-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: #6B7280;
            font-size: 0.875rem;
        }

        .input-group input {
            width: 100%;
            padding: 0.5rem 0.75rem;
            border-radius: 0.375rem;
            background-color: #2D2D2D;
            border: 1px solid #3D3D3D;
            color: white;
        }

        .input-group input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 2px rgba(33, 150, 243, 0.2);
        }

        /* Export button styles */
        .export-btn {
            background-color: var(--accent-green);
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-size: 0.75rem;
            margin-left: 0.5rem;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .export-btn:hover {
            background-color: #1B5E20;
        }

        .reactivate-btn {
            background-color: var(--primary);
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-size: 0.75rem;
            margin-left: 0.5rem;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .reactivate-btn:hover {
            background-color: var(--secondary);
        }

        /* Calculator styles */
        .calculator-container {
            background-color: #1E1E1E;
            border-radius: var(--border-radius);
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(33, 150, 243, 0.2);
            margin-bottom: 20px;
        }

        .section {
            margin-bottom: 15px;
            padding: 12px;
            background-color: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
        }

        .section-title {
            font-weight: 600;
            margin-bottom: 12px;
            color: var(--primary);
            font-size: 1rem;
        }

        .input-group {
            margin-bottom: 12px;
        }

        .input-group label {
            display: block;
            margin-bottom: 5px;
            font-size: 0.9rem;
            color: #9CA3AF;
        }

        .input-group input[type="number"],
        .input-group input[type="text"] {
            width: 100%;
            padding: 8px 12px;
            border-radius: 6px;
            background-color: #2D2D2D;
            border: 1px solid #3D3D3D;
            color: white;
            font-family: 'JetBrains Mono', monospace;
        }

        .input-group input[type="range"] {
            width: 100%;
            height: 6px;
            -webkit-appearance: none;
            background: #3D3D3D;
            border-radius: 3px;
            outline: none;
            margin: 10px 0;
        }

        .input-group input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background: var(--primary);
            cursor: pointer;
        }

        .input-group input[type="range"]::-moz-range-thumb {
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background: var(--primary);
            cursor: pointer;
        }

        .direction-buttons {
            display: flex;
            gap: 8px;
            margin-bottom: 15px;
            background: #2A2A2A;
            padding: 5px;
            border-radius: 10px;
        }

        .direction-btn {
            flex: 1;
            padding: 10px 0;
            border: none;
            border-radius: 6px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            font-size: 0.85rem;
            position: relative;
            overflow: hidden;
        }

        .long {
            background: transparent;
            color: #A5D6A7;
        }

        .short {
            background: transparent;
            color: #EF9A9A;
        }

        .direction-btn.active {
            color: white;
        }

        .long.active {
            background: linear-gradient(135deg, #4CAF50 0%, #2E7D32 100%);
        }

        .short.active {
            background: linear-gradient(135deg, #F44336 0%, #C62828 100%);
        }

        .result-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            padding: 8px;
            background-color: rgba(255, 255, 255, 0.03);
            border-radius: 5px;
            font-size: 0.9rem;
        }

        .result-value {
            font-weight: 500;
        }

        .profit {
            color: var(--success-color);
        }

        .loss {
            color: var(--accent-red);
        }

        .slider-container {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .slider-value {
            min-width: 30px;
            text-align: right;
            font-weight: 500;
            font-size: 0.9rem;
        }

        .preview-value {
            color: var(--warning-color);
            font-size: 0.8rem;
            margin-top: 5px;
            padding: 4px;
            background-color: rgba(255, 160, 0, 0.1);
            border-radius: 4px;
        }

        .leverage-container {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .leverage-value {
            min-width: 40px;
            text-align: center;
            font-weight: 600;
            color: var(--primary);
            background-color: rgba(33, 150, 243, 0.1);
            padding: 4px;
            border-radius: 4px;
            font-size: 0.9rem;
        }

        .leverage-warning {
            color: var(--danger-color);
            font-size: 0.75rem;
            margin-top: 5px;
            padding: 4px;
            background-color: rgba(207, 102, 121, 0.1);
            border-radius: 4px;
            display: none;
        }

        .main-header {
            text-align: center;
            margin-bottom: 30px;
            color: var(--accent-color);
            font-weight: 600;
            font-size: 2rem;
        }

        .main-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            width: 100%;
            margin: 0 auto;
            padding: 0;
        }

        /* Новые стили для нескольких тейк-профитов */
        .take-profit-levels {
            margin-top: 10px;
        }

        .take-profit-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
            padding: 5px;
            background-color: rgba(0, 255, 0, 0.05);
            border-radius: 3px;
        }

        .take-profit-ratio {
            color: var(--success-color);
            font-weight: 500;
        }

        .take-profit-price {
            color: var(--success-color);
        }

        .take-profit-value {
            color: var(--success-color);
        }

        @media (max-width: 1024px) {
            .main-container {
                grid-template-columns: 1fr;
                padding: 0 10px;
            }
        }

        /* Стили для переключателя способа ввода стоп-лосса */
        .stop-method-selector {
            display: flex;
            gap: 8px;
            margin-bottom: 10px;
            background: #2A2A2A;
            padding: 5px;
            border-radius: 10px;
        }

        .stop-method-btn {
            flex: 1;
            padding: 8px 0;
            border: none;
            border-radius: 6px;
            font-weight: 500;
            font-size: 0.8rem;
            cursor: pointer;
            background-color: transparent;
            color: #9CA3AF;
        }

        .stop-method-btn.active {
            background-color: rgba(33, 150, 243, 0.2);
            color: var(--primary);
        }

        /* Скрываем неактивные методы ввода */
        .stop-input-group {
            display: none;
        }

        .stop-input-group.active {
            display: block;
        }

        /* Стили для выбора типа сделки */
        .trade-type-selector {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-bottom: 15px;
        }

        .trade-type-btn {
            flex: 1;
            min-width: 120px;
            padding: 10px;
            border: none;
            border-radius: 6px;
            font-weight: 500;
            font-size: 0.8rem;
            cursor: pointer;
            background-color: rgba(255, 255, 255, 0.05);
            color: #9CA3AF;
            transition: all 0.3s;
        }

        .trade-type-btn.active {
            color: white;
        }

        .trade-type-btn.long-breakout.active {
            background: linear-gradient(135deg, #4CAF50 0%, #2E7D32 100%);
        }

        .trade-type-btn.long-fakeout.active {
            background: linear-gradient(135deg, #8BC34A 0%, #689F38 100%);
        }

        .trade-type-btn.short-breakout.active {
            background: linear-gradient(135deg, #F44336 0%, #C62828 100%);
        }

        .trade-type-btn.short-fakeout.active {
            background: linear-gradient(135deg, #FF7043 0%, #E64A19 100%);
        }

        /* Стили для модального окна экспорта в Telegram */
        .export-modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s;
        }

        .export-modal.active {
            opacity: 1;
            pointer-events: auto;
        }

        .export-modal-content {
            background-color: #1E1E1E;
            border-radius: 8px;
            padding: 20px;
            max-width: 500px;
            width: 90%;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
        }

        .export-modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .export-modal-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--primary);
        }

        .export-modal-close {
            background: none;
            border: none;
            color: #9CA3AF;
            font-size: 1.5rem;
            cursor: pointer;
        }

        .export-modal-body {
            margin-bottom: 20px;
        }

        .export-modal-footer {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
        }

        .export-modal-btn {
            padding: 8px 16px;
            border-radius: 4px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
        }

        .export-modal-btn-copy {
            background-color: var(--primary);
            color: white;
            border: 1px solid var(--primary);
        }

        .export-modal-btn-copy:hover {
            background-color: var(--secondary);
        }

        .export-modal-btn-close {
            background-color: transparent;
            color: #9CA3AF;
            border: 1px solid #3D3D3D;
        }

        .export-modal-btn-close:hover {
            background-color: rgba(255, 255, 255, 0.05);
            color: white;
        }

        /* Стили для формы настроек Telegram */
        .telegram-settings-form {
            margin-top: 15px;
        }

        .telegram-settings-form label {
            display: block;
            margin-bottom: 5px;
            font-size: 0.9rem;
            color: #9CA3AF;
        }

        .telegram-settings-form input {
            width: 100%;
            padding: 8px 12px;
            margin-bottom: 10px;
            border-radius: 6px;
            background-color: #2D2D2D;
            border: 1px solid #3D3D3D;
            color: white;
            font-family: 'JetBrains Mono', monospace;
        }

        .telegram-settings-form button {
            width: 100%;
            padding: 10px;
            background-color: var(--primary);
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 600;
        }

        .telegram-settings-form button:hover {
            background-color: var(--secondary);
        }

        .telegram-test-btn {
            margin-top: 10px;
            background-color: #4CAF50 !important;
        }

        .telegram-test-btn:hover {
            background-color: #2E7D32 !important;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px;
            background-color: #4CAF50;
            color: white;
            border-radius: 4px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            z-index: 1100;
            display: none;
        }

        /* Предпосылки styles */
        .button-container {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
        }

        .button-container button {
            background-color: #1E88E5;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }

        .button-container button:hover {
            background-color: #1565C0;
        }

        .text-display {
            background-color: #1e1e1e;
            padding: 15px;
            border-radius: 5px;
            white-space: pre-line;
            display: none;
            margin-top: 15px;
            border: 1px solid #333;
        }

        .action-btn {
            background-color: #4CAF50;
            padding: 8px 15px;
            margin-right: 10px;
        }

        .action-btn:hover {
            background-color: #45a049;
        }

        .export-btn {
            background-color: #2196F3;
        }

        .export-btn:hover {
            background-color: #0b7dda;
        }

        .action-buttons-container {
            display: flex;
            gap: 10px;
            margin-top: 15px;
            display: none;
        }

        .checkbox-item {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
        }

        .checkbox-item input {
            margin-right: 10px;
            cursor: pointer;
        }

        .status-message {
            margin-top: 15px;
            padding: 10px;
            border-radius: 5px;
            display: none;
        }

        .success {
            background-color: #2E7D32;
            color: white;
        }

        .error {
            background-color: #C62828;
            color: white;
        }

        .item-text {
            margin-left: 5px;
        }

        /* Average Calculator styles */
        .average-calculator {
            padding: 15px;
        }
    </style>
</head>
<body class="bg-dark">
    <nav class="shadow-sm w-full">
        <div class="w-full px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between h-16 items-center">
                <div class="flex items-center">
                    <i class="fas fa-chart-line text-primary text-xl mr-2"></i>
                    <span class="text-xl font-bold text-light">Crypto Tools</span>
                </div>
                <div class="flex items-center space-x-4">
                    <div class="menu-container">
                        <button class="menu-button" id="menuButton">
                            <i class="fas fa-bars mr-2"></i>Меню
                        </button>
                        <div class="menu-content" id="menuContent">
                            <a href="#" class="menu-item" onclick="showHome()">
                                <i class="fas fa-home mr-2"></i>Главная
                            </a>
                            <a href="alerts.html" class="menu-item">
                                <i class="fas fa-bell mr-2"></i>Алерты
                            </a>
                            <a href="calculator.html" class="menu-item">
                                <i class="fas fa-calculator mr-2"></i>Калькулятор
                            </a>
                            <a href="widget.html" class="menu-item">
                                <i class="fas fa-chart-line mr-2"></i>Виджет
                            </a>
                            <div class="menu-divider"></div>
                            <a href="#" class="menu-item" onclick="showLoginForm()" id="loginMenuItem">
                                <i class="fas fa-sign-in-alt mr-2"></i>Вход
                            </a>
                            <a href="#" class="menu-item" onclick="showRegisterForm()" id="registerMenuItem">
                                <i class="fas fa-user-plus mr-2"></i>Регистрация
                            </a>
                            <a href="#" class="menu-item hidden" onclick="handleLogout()" id="logoutMenuItem">
                                <i class="fas fa-sign-out-alt mr-2"></i>Выход
                            </a>
                        </div>
                    </div>
                    <div id="connectionStatus" class="connection-status">
                        <div class="status-dot status-connecting"></div>
                        <span>Подключение к Binance...</span>
                    </div>
                    <button id="userProfileBtn" class="hidden items-center text-gray-300 hover:text-white">
                        <img id="userAvatar" class="w-8 h-8 rounded-full mr-2" src="https://via.placeholder.com/32/2D2D2D/6B7280?text=U" alt="User">
                        <span id="userName">Гость</span>
                    </button>
                </div>
            </div>
        </div>
    </nav>

    <div class="w-full px-4 py-8">
        <div class="main-container">
            <!-- Alerts Section -->
            <div class="card rounded-lg p-6">
                <h2 class="text-xl font-bold mb-6 text-primary">
                    <i class="fas fa-plus-circle mr-2"></i>Создать новый алерт
                </h2>

                <form id="alertForm">
                    <input type="hidden" id="editAlertId" value="">
                    <div class="mb-4">
                        <label class="block text-gray-300 text-sm font-medium mb-2">Криптовалюта</label>
                        <div class="relative">
                            <input type="text" id="coinSearch" placeholder="Поиск монеты..."
                                class="w-full pl-10 pr-4 py-2 rounded-md focus:ring-primary focus:border-primary" required>
                            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                <i class="fas fa-search text-gray-400"></i>
                            </div>
                            <div id="marketTypeHint" class="market-type-hint"></div>
                        </div>
                        <div id="coinError" class="validation-message">Пожалуйста, выберите криптовалюту</div>
                        <select id="symbol" size="5"
                            class="w-full mt-2 px-3 py-2 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary hidden">
                        </select>
                    </div>

                    <div class="mb-4">
                        <label class="block text-gray-300 text-sm font-medium mb-2">Тип алерта</label>
                        <select id="alertType"
                            class="w-full px-3 py-2 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary">
                            <option value="price">Цена</option>
                            <option value="liquidation">Ликвидации</option>
                            <option value="funding">Фандинг</option>
                            <option value="oi">Открытый интерес</option>
                        </select>
                    </div>

                    <div class="mb-4">
                        <label class="block text-gray-300 text-sm font-medium mb-2">Условие</label>
                        <div class="flex">
                            <select id="condition"
                                class="w-1/3 px-3 py-2 rounded-l-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary">
                                <option value="+">Выше (+)</option>
                                <option value="-">Ниже (-)</option>
                            </select>
                            <input type="number" id="value"
                                class="w-2/3 px-3 py-2 border-t border-b border-r rounded-r-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                                placeholder="Значение" step="any" required>
                        </div>
                        <div id="valueError" class="validation-message">Пожалуйста, укажите значение</div>
                        <div id="currentPriceContainer" class="current-price-container hidden">
                            <span class="current-price-label">Текущая цена:</span>
                            <span id="currentPriceValue" class="current-price-value"></span>
                            <button type="button" onclick="applyCurrentPrice()" class="apply-price-btn"
                                title="Применить текущую цену">
                                <i class="fas fa-sync-alt"></i>
                                <span>Применить</span>
                            </button>
                        </div>
                    </div>

                    <div class="mb-4">
                        <label class="block text-gray-300 text-sm font-medium mb-2">Количество уведомлений</label>
                        <select id="notificationCount"
                            class="w-full px-3 py-2 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary">
                            <option value="5" selected>5 раз (интервал 30 сек)</option>
                            <option value="1">1 раз (интервал 30 сек)</option>
                            <option value="2">2 раза (интервал 30 сек)</option>
                            <option value="3">3 раза (интервал 30 сек)</option>
                            <option value="4">4 раза (интервал 30 сек)</option>
                            <option value="0">Пока не отключу (интервал 30 сек)</option>
                        </select>
                    </div>

                    <div class="mb-6">
                        <label class="block text-gray-300 text-sm font-medium mb-2">Уведомления</label>
                        <div class="notification-methods">
                            <div class="notification-method">
                                <input id="telegram" type="checkbox" checked class="h-4 w-4 focus:ring-primary">
                                <label for="telegram" class="ml-2 block text-sm text-gray-300">
                                    <i class="fab fa-telegram mr-1 text-blue-400"></i> Telegram
                                </label>
                                <button onclick="openTelegramSettings()"
                                    class="ml-2 text-sm text-blue-400 hover:text-blue-300 text-xs px-2 py-1">
                                    Настроить
                                </button>
                                <input type="text" id="userChatId" placeholder="Ваш Chat ID"
                                    class="ml-2 px-2 py-1 text-sm rounded-md hidden">
                            </div>
                            <div class="notification-method">
                                <input id="email" type="checkbox" class="h-4 w-4 focus:ring-primary">
                                <label for="email" class="ml-2 block text-sm text-gray-300">
                                    <i class="fas fa-envelope mr-1 text-gray-400"></i> Email
                                </label>
                                <input type="email" id="userEmail" placeholder="Ваш email"
                                    class="ml-2 px-2 py-1 text-sm rounded-md hidden">
                                <div id="userEmailError" class="validation-message">Неверный формат email</div>
                            </div>
                        </div>
                        <div class="mt-4">
                            <div class="tooltip file-input-container">
                                <button class="file-input-label text-xs px-3 py-1">
                                    <i class="fas fa-file-import mr-1"></i>Импорт из TXT (только фьючерсы)
                                </button>
                                <input type="file" id="bulkImportFile" class="file-input" accept=".txt">
                                <span class="tooltiptext">
                                    Формат файла:<br>
                                    Каждая строка должна содержать:<br>
                                    СИМВОЛ УСЛОВИЕ ЗНАЧЕНИЕ<br><br>
                                    Пример:<br>
                                    BTCUSDT + 50000 (цена выше 50000)<br>
                                    ETHUSDT - 3000 (цена ниже 3000)<br>
                                    SOLUSDT + 150 (цена выше 150)<br><br>
                                    Условия:<br>
                                    + означает "выше" (+)<br>
                                    - означает "ниже" (-)<br><br>
                                    Будут добавлены только фьючерсные пары
                                </span>
                            </div>
                        </div>
                    </div>

                    <button type="submit" class="btn-primary w-full text-white py-2 px-4 rounded-md font-medium mt-4">
                        <i class="fas fa-bell mr-2"></i><span id="submitBtnText">Создать алерт</span>
                    </button>
                </form>
            </div>

            <div class="card rounded-lg p-6">
                <div class="compact-alerts-header">
                    <div class="flex items-center flex-1 min-w-0">
                        <h2 class="compact-alerts-title">
                            <i class="fas fa-bell mr-1"></i>Алерты
                        </h2>
                        <div class="compact-filters no-scrollbar">
                            <button id="showActiveAlerts" class="compact-filter-btn bg-blue-900 text-blue-300 active">
                                Активные
                            </button>
                            <button id="showTriggeredAlerts" class="compact-filter-btn bg-gray-700 text-gray-300">
                                Сработавшие
                            </button>
                            <button id="showHistoryAlerts" class="compact-filter-btn bg-gray-700 text-gray-300">
                                История
                            </button>
                            <button id="showAllAlerts" class="compact-filter-btn bg-gray-700 text-gray-300">
                                Все
                            </button>
                        </div>
                    </div>
                    <div class="flex items-center">
                        <button id="exportAllAlerts" class="export-btn mr-2">
                            <i class="fab fa-telegram mr-1"></i>Экспорт всех
                        </button>
                        <button id="clearAlerts" class="compact-clear-btn hover:text-red-300">
                            <i class="fas fa-trash-alt mr-1"></i>Очистить
                        </button>
                    </div>
                </div>

                <div id="userAlerts" class="alerts-container space-y-4">
                    <div class="text-center text-gray-400 py-4">
                        У вас пока нет активных алертов
                    </div>
                </div>
            </div>

            <!-- Calculator Section -->
            <div class="calculator-container risk-calculator">
                <h1>Калькулятор рисков</h1>

                <div class="section">
                    <div class="section-title">Параметры сделки</div>

                    <div class="direction-buttons">
                        <button id="longBtn" class="direction-btn long active">Лонг</button>
                        <button id="shortBtn" class="direction-btn short">Шорт</button>
                    </div>

                    <!-- Выбор типа сделки -->
                    <div class="trade-type-selector" id="tradeTypeSelector" style="display: none;">
                        <button class="trade-type-btn long-breakout active" data-type="long-breakout">Лонг Пробой</button>
                        <button class="trade-type-btn long-fakeout" data-type="long-fakeout">Лонг Ложный пробой</button>
                        <button class="trade-type-btn short-breakout" data-type="short-breakout">Шорт Пробой</button>
                        <button class="trade-type-btn short-fakeout" data-type="short-fakeout">Шорт Ложный пробой</button>
                    </div>

                    <div class="input-group">
                        <label for="entryPrice">Цена входа (USDT)</label>
                        <input type="number" id="entryPrice" min="0" step="0.00000001" value="100.00">
                    </div>

                    <div class="input-group">
                        <label for="leverage">Кредитное плечо</label>
                        <div class="leverage-container">
                            <input type="range" id="leverage" min="1" max="100" value="10">
                            <span class="leverage-value" id="leverageValue">10x</span>
                        </div>
                        <div class="leverage-warning" id="leverageWarning">
                            Высокое плечо увеличивает риск ликвидации!
                        </div>
                    </div>

                    <!-- Переключатель способа ввода стоп-лосса -->
                    <div class="stop-method-selector">
                        <button class="stop-method-btn active" data-method="atr">По ATR</button>
                        <button class="stop-method-btn" data-method="price">По цене</button>
                    </div>

                    <!-- Группа ввода по ATR -->
                    <div class="stop-input-group active" id="atr-group">
                        <div class="input-group">
                            <label for="atr">ATR (USDT)</label>
                            <input type="number" id="atr" min="0" step="0.00000001" value="5.00">
                            <div class="preview-value">
                                Размер ATR: <span id="atrValue">5.00 USDT</span>
                            </div>
                        </div>

                        <div class="input-group">
                            <label for="riskPercent">Риск стоп-лосс (% от ATR)</label>
                            <div class="slider-container">
                                <input type="range" id="riskPercent" min="1" max="100" value="10">
                                <span class="slider-value" id="riskPercentValue">10</span>%
                            </div>
                            <div class="preview-value">
                                Стоп-лосс: минус <span id="previewAtrPercent">0.50 USDT</span> (<span
                                    id="previewAtrPercentValue">10%</span> от ATR)
                            </div>
                        </div>
                    </div>

                    <!-- Группа ввода по цене -->
                    <div class="stop-input-group" id="price-group">
                        <div class="input-group">
                            <label for="stopLossPrice">Цена стоп-лосса (USDT)</label>
                            <input type="number" id="stopLossPrice" min="0" step="0.00000001">
                            <div class="preview-value">
                                Разница: <span id="priceDifference">0.00 USDT</span>
                            </div>
                        </div>
                    </div>

                    <div class="input-group">
                        <label for="riskAmount">Риск на сделку (USDT)</label>
                        <input type="number" id="riskAmount" min="0" step="0.00000001" value="100.00">
                    </div>

                    <div class="input-group">
                        <label for="rewardRatio1">Соотношение тейк-профита (1:X)</label>
                        <div class="slider-container">
                            <input type="range" id="rewardRatio1" min="1" max="20" value="3">
                            <span class="slider-value" id="rewardRatio1Value">3</span>
                        </div>
                    </div>

                    <div class="input-group">
                        <label for="rewardRatio2">Дополнительный тейк-профит (1:X)</label>
                        <div class="slider-container">
                            <input type="range" id="rewardRatio2" min="1" max="20" value="5">
                            <span class="slider-value" id="rewardRatio2Value">5</span>
                        </div>
                    </div>
                </div>

                <div class="section">
                    <div class="section-title">Результаты</div>

                    <div class="result-item">
                        <span>Цена входа:</span>
                        <span class="result-value" id="entryPriceResult">100.00 USDT</span>
                    </div>

                    <div class="result-item">
                        <span>Размер позиции:</span>
                        <span class="result-value" id="positionSize">200.0000</span>
                    </div>

                    <div class="result-item">
                        <span>Стоп-лосс:</span>
                        <span class="result-value loss" id="stopLoss">99.50 USDT</span>
                    </div>

                    <div class="result-item">
                        <span>ATR:</span>
                        <span class="result-value" id="atrResult">5.00 USDT</span>
                    </div>

                    <div class="take-profit-levels" id="takeProfitLevels">
                        <!-- Здесь будут динамически добавляться уровни тейк-профита -->
                    </div>

                    <div class="result-item">
                        <span>Цена ликвидации:</span>
                        <span class="result-value loss" id="liquidationPrice">95.00 USDT</span>
                    </div>
                </div>

                <div class="flex gap-2">
                    <button class="export-btn flex-1" id="exportTextBtn">
                        <i class="fas fa-file-alt mr-2"></i>Экспорт в текст
                    </button>
                    <button class="export-btn flex-1" id="exportTelegramBtn">
                        <i class="fab fa-telegram mr-2"></i>Отправить в Telegram
                    </button>
                </div>
            </div>

            <!-- Предпосылки Section -->
            <div class="calculator-container">
                <h2>Предпосылки</h2>

                <div class="button-container">
                    <button onclick="toggleText('breakthrough')">Пробой</button>
                    <button onclick="toggleText('falseBreakthrough')">Ложный пробой</button>
                    <button style="background-color: #C62828;" onclick="toggleText('breakthroughMinuses')">Пробой минусы</button>
                    <button style="background-color: #C62828;" onclick="toggleText('falseBreakthroughMinuses')">Ложный пробой минусы</button>
                </div>

                <div id="breakthroughText" class="text-display">
                    <h3>Пробой</h3>
                    
                    <p>📊Предпосылки</p>
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Ближний ретест</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Нет реакции на ЛП</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Накопление</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Закрытие вблизи уровня до 5%</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">После сильного движения нет отката</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Впереди свободная зона</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Выкупной бар</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Продажный бар</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Проторговка вблизи уровня на 1D</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Проторговка вблизи уровня на коротком таймфрейме 1ч/4ч</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Подходит поджатием на 1D</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Подходит поджатием на 1ч/4ч</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Понижающие хаи и лои</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Повышающие хаи и лои</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Затухание волатильности</span></div>
                </div>

                <div id="falseBreakthroughText" class="text-display">
                    <h3>Ложный пробой</h3>
                    
                    <p>📊Предпосылки</p>
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Дальний ретест</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Подход на больших барах</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Выход повышенные объемы перед уровням на 1ч 4ч</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Экстремум</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Впереди зараженная зона</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Длинное безоткатное движение</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Закрытие вдали от уровня мин от 10%</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Нет накопления</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Резкий подход на лок таймфрейме</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Повышенная волатильность</span></div>
                </div>

                <div id="breakthroughMinusesText" class="text-display">
                    <h3>Пробой минусы</h3>

                    <p>⛔️ Минусы</p>
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Повышенная волатильность</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Зараженная зона на 1D</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Зараженная зона на лок.ТФ</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Глубокий ЛП</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Резкий подход на лок ТФ</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Далеко закрылись от уровня</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Пройдено больше половины ATR</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Накопление на 1ч далеко от уровня</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Выравнивание баров на лок.ТФ</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Выход повышенного объёма на лок.ТФ </span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Слабое накопление на 1D</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Слабое накопление на лок.ТФ</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Уровень часто прошивается на лок.ТФ</span></div>
                </div>

                <div id="falseBreakthroughMinusesText" class="text-display">
                    <h3>Ложный пробой минусы</h3>
                    
                    <p>⛔️ Минусы</p>
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Повышенная волатильность</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Зараженная зона на 1D</span></div>
                    
                    <div class="checkbox-item"><input type="checkbox"><span class="item-text">Зараженная зона на лок.ТФ</span></div>
                </div>

                <div id="actionButtons" class="action-buttons-container">
                    <button id="copyBtn" class="action-btn" onclick="copySelectedText()">Копировать выбранное</button>
                    <button id="exportBtn" class="action-btn export-btn" onclick="exportSelectedToTelegram()">Отправить в Telegram</button>
                </div>

                <div id="statusMessage" class="status-message"></div>
            </div>

            <!-- Average Calculator -->
            <div class="calculator-container average-calculator">
                <h1>Калькулятор среднего</h1>
                <div class="section">
                    <div class="input-group">
                        <label for="numbersInput">Введите числа через пробел:</label>
                        <input type="text" id="numbersInput" placeholder="5 10 15 20 0.0000012">
                    </div>
                    <button onclick="calculateAverage()"
                        style="width: 100%; padding: 10px; background: var(--accent-color); border: none; border-radius: 5px; color: white; font-weight: 600;">Рассчитать</button>
                    <div id="result" style="margin-top: 15px;"></div>
                </div>
            </div>
        </div>
    </div>

    <div id="notificationModal"
        class="fixed bottom-4 right-4 w-80 rounded-lg shadow-lg border-l-4 border-accent-green hidden"
        style="background-color: #1E1E1E;">
        <div class="p-4">
            <div class="flex justify-between items-start">
                <div class="flex-1">
                    <h3 class="font-medium text-light" id="notificationTitle">Алерт сработал</h3>
                    <p class="text-sm text-gray-300 mt-1" id="notificationMessage"></p>
                </div>
                <button id="closeNotification" class="ml-2 text-gray-400 hover:text-gray-300">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
    </div>

    <div id="editModal" class="edit-modal">
        <div class="edit-modal-content">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-bold text-primary">Редактировать алерт</h3>
                <button onclick="closeEditModal()" class="text-gray-400 hover:text-white">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div id="editFormContent"></div>
        </div>
    </div>

    <!-- Telegram Settings Modal -->
    <div id="telegramSettingsModal" class="edit-modal">
        <div class="edit-modal-content">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-bold text-primary">Настройка Telegram уведомлений</h3>
                <button onclick="closeTelegramSettings()" class="text-gray-400 hover:text-white">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="mb-4">
                <p class="text-gray-300 mb-4">Для получения уведомлений в Telegram вам нужно подписаться на нашего бота:</p>

                <ol class="list-decimal text-gray-300 pl-6 mb-4">
                    <li class="mb-2">Откройте Telegram и найдите нашего бота: @CryptoAlert88_bot</li>
                    <li class="mb-2">Нажмите кнопку Start в диалоге с ботом</li>
                    <li class="mb-2">Вернитесь на эту страницу и введите ваш Chat ID</li>
                </ol>

                <p class="text-gray-300 mb-4">Или отсканируйте QR-код:</p>

                <div class="flex justify-center mb-4">
                    <div class="bg-white p-2">
                        <img src="https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=https://t.me/CryptoAlert88_bot"
                            alt="QR Code">
                    </div>
                </div>

                <div class="mb-4">
                    <label class="block text-gray-300 text-sm font-medium mb-2">Ваш Chat ID</label>
                    <input type="text" id="telegramChatId" placeholder="Ваш Chat ID"
                        class="w-full px-3 py-2 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                        value="">
                </div>

                <button onclick="saveTelegramSettings()"
                    class="btn-primary w-full text-white py-2 px-4 rounded-md font-medium text-sm">
                    Сохранить настройки
                </button>
            </div>
        </div>
    </div>

    <!-- Bot Connection Hint Modal -->
    <div id="botConnectionHint" class="edit-modal">
        <div class="edit-modal-content">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-bold text-primary">Требуется подключение к боту</h3>
                <button onclick="closeBotConnectionHint()" class="text-gray-400 hover:text-white">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="mb-4">
                <p class="text-gray-300 mb-4">Для создания алертов необходимо подключиться к Telegram боту.</p>
                <button onclick="openTelegramSettings()"
                    class="btn-primary w-full text-white py-2 px-4 rounded-md font-medium">
                    <i class="fab fa-telegram mr-2"></i>Подключить бота
                </button>
            </div>
        </div>
    </div>

    <!-- Login Modal -->
    <div id="loginModal"
        class="fixed top-0 left-0 right-0 bottom-0 bg-black bg-opacity-80 flex items-center justify-center z-50 opacity-0 pointer-events-none transition-opacity duration-300">
        <div class="bg-dark rounded-lg p-6 w-full max-w-md">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-bold text-primary">Вход в аккаунт</h3>
                <button onclick="closeLoginModal()" class="text-gray-400 hover:text-white">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="mb-4">
                <div class="input-group">
                    <label for="loginEmail">Email</label>
                    <input type="email" id="loginEmail" placeholder="Ваш email">
                </div>
                <div class="input-group">
                    <label for="loginPassword">Пароль</label>
                    <input type="password" id="loginPassword" placeholder="Ваш пароль">
                </div>
                <button onclick="handleLogin()"
                    class="btn-primary w-full text-white py-2 px-4 rounded-md font-medium mt-4">
                    Войти
                </button>
            </div>
        </div>
    </div>

    <!-- Register Modal -->
    <div id="registerModal"
        class="fixed top-0 left-0 right-0 bottom-0 bg-black bg-opacity-80 flex items-center justify-center z-50 opacity-0 pointer-events-none transition-opacity duration-300">
        <div class="bg-dark rounded-lg p-6 w-full max-w-md">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-bold text-primary">Регистрация</h3>
                <button onclick="closeRegisterModal()" class="text-gray-400 hover:text-white">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="mb-4">
                <div class="input-group">
                    <label for="registerEmail">Email</label>
                    <input type="email" id="registerEmail" placeholder="Ваш email">
                </div>
                <div class="input-group">
                    <label for="registerPassword">Пароль</label>
                    <input type="password" id="registerPassword" placeholder="Придумайте пароль">
                </div>
                <div class="input-group">
                    <label for="registerConfirmPassword">Подтвердите пароль</label>
                    <input type="password" id="registerConfirmPassword" placeholder="Повторите пароль">
                </div>
                <button onclick="handleRegister()"
                    class="btn-primary w-full text-white py-2 px-4 rounded-md font-medium mt-4">
                    Зарегистрироваться
                </button>
            </div>
        </div>
    </div>

    <script>
        // Конфигурация API
        const API_CONFIG = {
            RECONNECT_INTERVAL: 5000,
            TIMEOUT: 10000,
            MAX_RETRIES: 3,
            ENDPOINTS: {
                TEST: 'https://api.binance.com/api/v3/ping',
                FUTURES: 'https://fapi.binance.com',
                SPOT: 'https://api.binance.com'
            }
        };

        // Конфигурация Telegram - ваш токен бота
        const TG_BOT_TOKEN = '8044055704:AAGk8cQFayPqYCscLlEB3qGRj0Uw_NTpe30';

        let allFutures = [];
        let allSpot = [];
        let userAlerts = [];
        let currentAlertFilter = 'active';
        let alertCooldowns = {};
        let apiManager;
        let activeTriggeredAlerts = {};

        // Функции для работы с пользователями
        function isValidEmail(email) {
            const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(email);
        }

        function handleRegister() {
            const email = document.getElementById('registerEmail').value.trim();
            const password = document.getElementById('registerPassword').value;
            const confirmPassword = document.getElementById('registerConfirmPassword')?.value;

            // Валидация полей
            if (!email || !password || !confirmPassword) {
                showNotification('Ошибка', 'Все поля обязательны для заполнения');
                return;
            }

            if (!isValidEmail(email)) {
                showNotification('Ошибка', 'Введите корректный email');
                return;
            }

            if (password.length < 8) {
                showNotification('Ошибка', 'Пароль должен содержать минимум 8 символов');
                return;
            }

            if (password !== confirmPassword) {
                showNotification('Ошибка', 'Пароли не совпадают');
                return;
            }

            // Проверяем, есть ли уже такой пользователь
            const users = JSON.parse(localStorage.getItem('users') || '[]');
            const userExists = users.some(user => user.email === email);

            if (userExists) {
                showNotification('Ошибка', 'Пользователь с таким email уже зарегистрирован');
                return;
            }

            // Создаем нового пользователя
            const newUser = {
                email: email,
                password: btoa(password), // Простое шифрование (не безопасно для продакшена!)
                createdAt: new Date().toISOString(),
                alerts: []
            };

            // Сохраняем пользователя
            users.push(newUser);
            localStorage.setItem('users', JSON.stringify(users));
            localStorage.setItem('currentUser', JSON.stringify({ email: email }));

            showNotification('Успех', 'Регистрация прошла успешно!');
            closeRegisterModal();

            // Обновляем интерфейс для зарегистрированного пользователя
            updateUserUI(email);
        }

        function handleLogin() {
            const email = document.getElementById('loginEmail').value.trim();
            const password = document.getElementById('loginPassword').value;

            if (!email || !password) {
                showNotification('Ошибка', 'Введите email и пароль');
                return;
            }

            const users = JSON.parse(localStorage.getItem('users') || '[]');
            const user = users.find(u => u.email === email && atob(u.password) === password);

            if (!user) {
                showNotification('Ошибка', 'Неверный email или пароль');
                return;
            }

            localStorage.setItem('currentUser', JSON.stringify({ email: email }));
            showNotification('Успех', 'Вход выполнен успешно!');
            closeLoginModal();
            updateUserUI(email);
        }

        function handleLogout() {
            localStorage.removeItem('currentUser');
            showNotification('Успех', 'Вы успешно вышли из системы');
            updateUserUI(null);
            toggleMenu();
        }

        function updateUserUI(email) {
            const userProfileBtn = document.getElementById('userProfileBtn');
            const userName = document.getElementById('userName');
            const loginMenuItem = document.getElementById('loginMenuItem');
            const registerMenuItem = document.getElementById('registerMenuItem');
            const logoutMenuItem = document.getElementById('logoutMenuItem');

            if (email) {
                // Пользователь авторизован
                if (userProfileBtn) userProfileBtn.classList.remove('hidden');
                if (userName) userName.textContent = email.split('@')[0];
                if (loginMenuItem) loginMenuItem.classList.add('hidden');
                if (registerMenuItem) registerMenuItem.classList.add('hidden');
                if (logoutMenuItem) logoutMenuItem.classList.remove('hidden');
            } else {
                // Гость
                if (userProfileBtn) userProfileBtn.classList.add('hidden');
                if (loginMenuItem) loginMenuItem.classList.remove('hidden');
                if (registerMenuItem) registerMenuItem.classList.remove('hidden');
                if (logoutMenuItem) logoutMenuItem.classList.add('hidden');
            }
        }

        // Функция для сохранения сработавшего алерта в историю
        function saveTriggeredAlert(alert) {
            const history = JSON.parse(localStorage.getItem('triggeredAlertsHistory') || '[]');
            history.push({
                ...alert,
                triggeredAt: new Date().toISOString()
            });
            localStorage.setItem('triggeredAlertsHistory', JSON.stringify(history));
        }

        // Функция для загрузки истории сработавших алертов
        function loadTriggeredAlerts() {
            return JSON.parse(localStorage.getItem('triggeredAlertsHistory') || '[]');
        }

        // Сохраняем состояние приложения
        function saveAppState() {
            try {
                // Сохраняем алерты
                localStorage.setItem('cryptoAlerts', JSON.stringify(userAlerts));

                // Сохраняем текущий фильтр
                localStorage.setItem('alertFilter', currentAlertFilter);

                // Сохраняем настройки Telegram
                const telegramCheckbox = document.getElementById('telegram');
                const tgSettings = {
                    chatId: localStorage.getItem('tg_chat_id'),
                    enabled: telegramCheckbox ? telegramCheckbox.checked : false
                };
                localStorage.setItem('tgSettings', JSON.stringify(tgSettings));

                console.log("Состояние сохранено");
                return true;
            } catch (error) {
                console.error("Ошибка при сохранении состояния:", error);
                return false;
            }
        }

        // Загружаем состояние приложения
        function loadAppState() {
            try {
                // Загружаем алерты
                const savedAlerts = localStorage.getItem('cryptoAlerts');
                if (savedAlerts) {
                    userAlerts = JSON.parse(savedAlerts);
                }

                // Загружаем фильтр
                const savedFilter = localStorage.getItem('alertFilter');
                if (savedFilter) {
                    currentAlertFilter = savedFilter;
                }

                // Загружаем настройки Telegram
                const tgSettings = JSON.parse(localStorage.getItem('tgSettings') || '{}');
                if (tgSettings.chatId) {
                    localStorage.setItem('tg_chat_id', tgSettings.chatId);
                    const userChatId = document.getElementById('userChatId');
                    if (userChatId) {
                        userChatId.value = tgSettings.chatId;
                        userChatId.classList.remove('hidden');
                    }
                }

                if (tgSettings.enabled !== undefined) {
                    const telegramCheckbox = document.getElementById('telegram');
                    if (telegramCheckbox) {
                        telegramCheckbox.checked = tgSettings.enabled;
                    }
                }

                console.log("Состояние загружено");
                return true;
            } catch (error) {
                console.error("Ошибка при загрузке состояния:", error);
                return false;
            }
        }

        class BinanceAPIManager {
            constructor() {
                this.connectionState = {
                    connected: false,
                    lastCheck: null,
                    retries: 0,
                    error: null
                };
            }

            async init() {
                await this.checkAPIConnection();
                this.startHealthCheck();
            }

            async checkAPIConnection() {
                try {
                    const response = await this._fetchWithTimeout(
                        API_CONFIG.ENDPOINTS.TEST,
                        { method: 'GET' }
                    );

                    if (!response.ok) throw new Error(`HTTP ${response.status}`);

                    this._updateConnectionState({
                        connected: true,
                        retries: 0,
                        error: null
                    });

                    return true;
                } catch (error) {
                    this._handleConnectionError(error);
                    return false;
                }
            }

            async _fetchWithTimeout(url, options = {}) {
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), API_CONFIG.TIMEOUT);

                try {
                    const response = await fetch(url, {
                        ...options,
                        signal: controller.signal
                    });
                    clearTimeout(timeoutId);
                    return response;
                } catch (error) {
                    clearTimeout(timeoutId);
                    throw error;
                }
            }

            _updateConnectionState(stateUpdate) {
                this.connectionState = {
                    ...this.connectionState,
                    ...stateUpdate,
                    lastCheck: new Date().toISOString()
                };
                this._updateUIStatus();
            }

            _handleConnectionError(error) {
                const newRetries = this.connectionState.retries + 1;
                const fatal = newRetries >= API_CONFIG.MAX_RETRIES;

                this._updateConnectionState({
                    connected: false,
                    retries: newRetries,
                    error: fatal ? 'Fatal connection error' : error.message
                });

                if (!fatal) {
                    setTimeout(() => this.checkAPIConnection(), API_CONFIG.RECONNECT_INTERVAL);
                }
            }

            startHealthCheck() {
                setInterval(() => {
                    if (!this.connectionState.connected) {
                        this.checkAPIConnection();
                    }
                }, 30000);
            }

            _updateUIStatus() {
                const statusElement = document.getElementById('connectionStatus');
                if (!statusElement) return;

                const dotElement = statusElement.querySelector('.status-dot');
                const textElement = statusElement.querySelector('span');

                if (!dotElement || !textElement) return;

                if (this.connectionState.connected) {
                    statusElement.classList.add('connected');
                    statusElement.classList.remove('error');
                    dotElement.classList.add('status-connected');
                    dotElement.classList.remove('status-error');
                    textElement.textContent = `Connected to Binance (${new Date(this.connectionState.lastCheck).toLocaleTimeString()})`;
                } else {
                    statusElement.classList.add('error');
                    statusElement.classList.remove('connected');
                    dotElement.classList.add('status-error');
                    dotElement.classList.remove('status-connected');
                    textElement.textContent = `Connection error: ${this.connectionState.error || 'Unknown error'} [Retry ${this.connectionState.retries}/${API_CONFIG.MAX_RETRIES}]`;
                }
            }

            async getCurrentPrice(symbol, marketType) {
                try {
                    const endpoint = marketType === 'futures'
                        ? `https://fapi.binance.com/fapi/v1/ticker/price?symbol=${symbol}`
                        : `https://api.binance.com/api/v3/ticker/price?symbol=${symbol}`;

                    const response = await this._fetchWithTimeout(endpoint);
                    const data = await response.json();
                    return parseFloat(data.price);
                } catch (error) {
                    console.error('Error getting current price:', error);
                    return null;
                }
            }
        }

        // Функция для отправки уведомлений в Telegram
        async function sendTelegramNotification(message, chatId) {
            try {
                const response = await fetch(`https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        chat_id: chatId,
                        text: message,
                        parse_mode: 'Markdown'
                    })
                });

                const data = await response.json();
                if (!data.ok) {
                    console.error('Ошибка отправки в Telegram:', data);
                    return false;
                }
                return true;
            } catch (error) {
                console.error('Ошибка отправки сообщения:', error);
                return false;
            }
        }

        // Функция для экспорта всех активных алертов в Telegram
        async function exportAllActiveAlerts() {
            const chatId = localStorage.getItem('tg_chat_id');
            if (!chatId) {
                showBotConnectionHint();
                return;
            }

            const activeAlerts = userAlerts.filter(alert => !alert.triggered);
            if (activeAlerts.length === 0) {
                showNotification('Ошибка', 'Нет активных алертов для экспорта');
                return;
            }

            // Формируем сообщение
            let message = '📋 Список активных алертов:\n\n';
            activeAlerts.forEach((alert, index) => {
                message += `${index + 1}. ${alert.symbol} ${alert.condition} ${alert.value}\n`;
                message += `Тип: ${alert.type} | Уведомлений: ${alert.notificationCount === 0 ? '∞' : alert.notificationCount}\n\n`;
            });

            try {
                const success = await sendTelegramNotification(message, chatId);
                if (success) {
                    showNotification('Успешно', 'Все активные алерты экспортированы в Telegram');
                } else {
                    showNotification('Ошибка', 'Не удалось отправить алерты в Telegram');
                }
            } catch (error) {
                console.error('Ошибка при экспорте алертов:', error);
                showNotification('Ошибка', 'Произошла ошибка при экспорте');
            }
        }

        function applyCurrentPrice() {
            const currentPriceValue = document.getElementById('currentPriceValue');
            if (!currentPriceValue) return;

            const priceText = currentPriceValue.textContent;
            const price = parseFloat(priceText);
            if (!isNaN(price)) {
                const valueInput = document.getElementById('value');
                if (valueInput) {
                    valueInput.value = price;
                    hideValidationError('value');
                }
            }
        }

        function applyCurrentPriceForEdit() {
            const currentPriceValue = document.getElementById('editCurrentPriceValue');
            if (!currentPriceValue) return;

            const priceText = currentPriceValue.textContent;
            const price = parseFloat(priceText);
            if (!isNaN(price)) {
                const valueInput = document.getElementById('editValue');
                if (valueInput) {
                    valueInput.value = price;
                    hideValidationError('editValue');
                }
            }
        }

        function getMarketTypeBySymbol(symbol) {
            const futuresMatch = allFutures.find(c => c.symbol === symbol);
            if (futuresMatch) return 'futures';

            const spotMatch = allSpot.find(c => c.symbol === symbol);
            if (spotMatch) return 'spot';

            return null;
        }

        function showValidationError(fieldId, message) {
            const field = document.getElementById(fieldId);
            const errorElement = document.getElementById(`${fieldId}Error`);

            if (!field || !errorElement) return;

            field.classList.add('validation-error');
            errorElement.textContent = message;
            errorElement.style.display = 'block';
        }

        function hideValidationError(fieldId) {
            const field = document.getElementById(fieldId);
            const errorElement = document.getElementById(`${fieldId}Error`);

            if (!field || !errorElement) return;

            field.classList.remove('validation-error');
            errorElement.style.display = 'none';
        }

        function validateForm() {
            let isValid = true;

            // Проверка подключения к боту если Telegram выбран
            const telegramCheckbox = document.getElementById('telegram');
            if (telegramCheckbox && telegramCheckbox.checked) {
                const chatId = localStorage.getItem('tg_chat_id') || document.getElementById('userChatId')?.value;
                if (!chatId) {
                    showBotConnectionHint();
                    isValid = false;
                }
            }

            // Проверка криптовалюты
            const coinSearch = document.getElementById('coinSearch');
            const symbol = document.getElementById('symbol');

            if (!coinSearch || !symbol || !coinSearch.value.trim() || !symbol.value) {
                showValidationError('coinSearch', 'Пожалуйста, выберите криптовалюту');
                isValid = false;
            } else {
                hideValidationError('coinSearch');
            }

            // Проверка значения
            const value = document.getElementById('value');
            if (!value || !value.value.trim()) {
                showValidationError('value', 'Пожалуйста, укажите значение');
                isValid = false;
            } else if (isNaN(parseFloat(value.value))) {
                showValidationError('value', 'Пожалуйста, укажите числовое значение');
                isValid = false;
            } else {
                hideValidationError('value');
            }

            // Валидация Telegram Chat ID
            if (telegramCheckbox && telegramCheckbox.checked) {
                const userChatId = document.getElementById('userChatId');
                if (!userChatId || !userChatId.value.trim()) {
                    showValidationError('userChatId', 'Пожалуйста, укажите Telegram Chat ID');
                    isValid = false;
                }
            }

            // Валидация email
            const emailCheckbox = document.getElementById('email');
            if (emailCheckbox && emailCheckbox.checked) {
                const userEmail = document.getElementById('userEmail');
                if (!userEmail || !userEmail.value.trim()) {
                    showValidationError('userEmail', 'Пожалуйста, укажите email');
                    isValid = false;
                } else if (!isValidEmail(userEmail.value)) {
                    showValidationError('userEmail', 'Неверный формат email');
                    isValid = false;
                } else {
                    hideValidationError('userEmail');
                }
            }

            return isValid;
        }

        function validateEditForm() {
            let isValid = true;

            // Проверка значения
            const value = document.getElementById('editValue');
            if (!value || !value.value.trim()) {
                showValidationError('editValue', 'Пожалуйста, укажите значение');
                isValid = false;
            } else if (isNaN(parseFloat(value.value))) {
                showValidationError('editValue', 'Пожалуйста, укажите числовое значение');
                isValid = false;
            } else {
                hideValidationError('editValue');
            }

            return isValid;
        }

        async function loadMarketData() {
            try {
                // Проверяем соединение перед загрузкой данных
                if (!apiManager.connectionState.connected) {
                    const connected = await apiManager.checkAPIConnection();
                    if (!connected) {
                        throw new Error('No connection to Binance API');
                    }
                }

                // Загрузка фьючерсных данных
                const futuresResponse = await fetch('https://fapi.binance.com/fapi/v1/exchangeInfo');
                if (!futuresResponse.ok) throw new Error(`Futures API error: ${futuresResponse.status}`);
                const futuresData = await futuresResponse.json();

                allFutures = futuresData.symbols
                    .filter(s => s.contractType === 'PERPETUAL' && s.quoteAsset === 'USDT')
                    .map(symbol => ({
                        symbol: symbol.symbol,
                        baseAsset: symbol.baseAsset,
                        quoteAsset: symbol.quoteAsset,
                        contractType: symbol.contractType,
                        marketType: 'futures'
                    }));

                // Загрузка спотовых данных
                const spotResponse = await fetch('https://api.binance.com/api/v3/exchangeInfo');
                if (!spotResponse.ok) throw new Error(`Spot API error: ${spotResponse.status}`);
                const spotData = await spotResponse.json();

                allSpot = spotData.symbols
                    .filter(s => s.quoteAsset === 'USDT' || s.quoteAsset === 'BTC' || s.quoteAsset === 'ETH' || s.quoteAsset === 'BNB')
                    .map(symbol => ({
                        symbol: symbol.symbol,
                        baseAsset: symbol.baseAsset,
                        quoteAsset: symbol.quoteAsset,
                        marketType: 'spot'
                    }));

                updateCoinSelect();
            } catch (error) {
                console.error('Error loading market data:', error);
                apiManager._handleConnectionError(error);
            }
        }

        function showNotification(title, message) {
            const modal = document.getElementById('notificationModal');
            const notificationTitle = document.getElementById('notificationTitle');
            const notificationMessage = document.getElementById('notificationMessage');

            if (!modal || !notificationTitle || !notificationMessage) return;

            notificationTitle.textContent = title;
            notificationMessage.textContent = message;

            modal.classList.remove('hidden');
            setTimeout(() => {
                modal.classList.add('hidden');
            }, 5000);
        }

        function updateCoinSelect() {
            const coinSearch = document.getElementById('coinSearch');
            const coinSelect = document.getElementById('symbol');

            if (!coinSearch || !coinSelect) return;

            const searchTerm = coinSearch.value.toLowerCase();

            const allMarketData = [...allFutures, ...allSpot];
            const filteredCoins = allMarketData.filter(coin =>
                coin.symbol.toLowerCase().includes(searchTerm) ||
                coin.baseAsset.toLowerCase().includes(searchTerm)
            );

            const limitedCoins = filteredCoins.slice(0, 100);

            coinSelect.innerHTML = limitedCoins.map(coin => {
                const badge = coin.marketType === 'spot' ?
                    '<span class="spot-badge">SPOT</span>' :
                    '<span class="futures-badge">FUTURES</span>';
                return `<option value="${coin.symbol}" data-market-type="${coin.marketType}">${coin.symbol} ${badge}</option>`;
            }).join('');

            if (searchTerm) {
                coinSelect.classList.remove('hidden');
                coinSelect.size = Math.min(limitedCoins.length, 5);
            } else {
                coinSelect.classList.add('hidden');
            }
        }

        async function createAlertForSymbol(symbol, currentPrice) {
            const coinSearch = document.getElementById('coinSearch');
            const symbolInput = document.getElementById('symbol');
            const valueInput = document.getElementById('value');
            const hint = document.getElementById('marketTypeHint');

            if (!coinSearch || !symbolInput || !valueInput || !hint) return;

            coinSearch.value = symbol;

            const marketType = getMarketTypeBySymbol(symbol);
            const badge = marketType === 'spot' ?
                '<span class="spot-badge">SPOT</span>' :
                '<span class="futures-badge">FUTURES</span>';

            hint.innerHTML = badge;

            symbolInput.value = symbol;
            valueInput.value = currentPrice;
            symbolInput.classList.add('hidden');

            // Скрываем ошибки валидации при выборе из списка
            hideValidationError('coinSearch');
            hideValidationError('value');

            // Получаем текущую цену и показываем её
            const currentPriceValue = await apiManager.getCurrentPrice(symbol, marketType);
            if (currentPriceValue !== null) {
                const currentPriceContainer = document.getElementById('currentPriceContainer');
                const currentPriceValueElement = document.getElementById('currentPriceValue');
                if (currentPriceContainer && currentPriceValueElement) {
                    currentPriceValueElement.textContent = currentPriceValue;
                    currentPriceContainer.classList.remove('hidden');
                }
            }
        }

        async function addUserAlert(symbol, type, condition, value, notificationMethods, notificationCount, chatId) {
            try {
                // Проверяем наличие подключения для Telegram
                if (notificationMethods.includes('telegram')) {
                    const savedChatId = localStorage.getItem('tg_chat_id') || chatId;
                    if (!savedChatId) {
                        showBotConnectionHint();
                        return false;
                    }
                }

                const marketType = getMarketTypeBySymbol(symbol);

                const newAlert = {
                    id: Date.now(),
                    symbol,
                    type,
                    condition,
                    value: parseFloat(value),
                    notificationMethods,
                    notificationCount: parseInt(notificationCount),
                    chatId: notificationMethods.includes('telegram') ? (localStorage.getItem('tg_chat_id') || chatId) : null,
                    triggeredCount: 0,
                    createdAt: new Date().toISOString(),
                    triggered: false,
                    lastNotificationTime: 0,
                    marketType
                };

                userAlerts.push(newAlert);
                saveAppState();

                // Обновляем список алертов сразу после добавления
                loadUserAlerts(currentAlertFilter);

                return true;
            } catch (error) {
                console.error("Ошибка при добавлении алерта:", error);
                showNotification('Ошибка', 'Не удалось создать алерт');
                return false;
            }
        }

        function loadUserAlerts(filter = 'active') {
            const alertsContainer = document.getElementById('userAlerts');
            if (!alertsContainer) return;

            currentAlertFilter = filter;
            saveAppState();

            document.querySelectorAll('.compact-filter-btn').forEach(btn => {
                btn.classList.remove('bg-blue-900', 'text-blue-300');
                btn.classList.add('bg-gray-700', 'text-gray-300');
            });

            const activeBtn = document.getElementById(`show${filter.charAt(0).toUpperCase() + filter.slice(1)}Alerts`);
            if (activeBtn) {
                activeBtn.classList.add('bg-blue-900', 'text-blue-300');
                activeBtn.classList.remove('bg-gray-700', 'text-gray-300');
            }

            let filteredAlerts = [];

            if (filter === 'history') {
                filteredAlerts = loadTriggeredAlerts();

                if (filteredAlerts.length === 0) {
                    alertsContainer.innerHTML = `
                        <div class="text-center text-gray-400 py-4">
                            История срабатываний пуста
                        </div>
                    `;
                    return;
                }
            } else {
                switch (filter) {
                    case 'active':
                        filteredAlerts = userAlerts.filter(alert => !alert.triggered);
                        break;
                    case 'triggered':
                        filteredAlerts = userAlerts.filter(alert => alert.triggered);
                        break;
                    case 'all':
                        filteredAlerts = [...userAlerts];
                        break;
                }

                if (filteredAlerts.length === 0) {
                    let message = '';
                    switch (filter) {
                        case 'active':
                            message = 'У вас пока нет активных алертов';
                            break;
                        case 'triggered':
                            message = 'У вас пока нет сработавших алертов';
                            break;
                        case 'all':
                            message = 'У вас пока нет алертов';
                            break;
                    }
                    alertsContainer.innerHTML = `
                        <div class="text-center text-gray-400 py-4">
                            ${message}
                        </div>
                    `;
                    return;
                }
            }

            filteredAlerts.sort((a, b) => {
                const dateA = a.triggeredAt || a.createdAt;
                const dateB = b.triggeredAt || b.createdAt;
                return new Date(dateB) - new Date(dateA);
            });

            let html = '';

            filteredAlerts.forEach(alert => {
                const date = new Date(alert.triggeredAt || alert.createdAt);
                const isTriggered = alert.triggered || filter === 'history';
                const isUp = alert.condition === '+';
                const isHistory = filter === 'history';
                const isActiveTriggered = activeTriggeredAlerts[alert.id] && !isHistory;

                html += `
                    <div id="alert-${alert.id}" class="alert-card rounded-md p-4 shadow-sm ${isActiveTriggered ? 'triggered' : ''}">
                        <div class="flex justify-between items-start">
                            <div class="flex items-center">
                                <div class="flex-1">
                                    <div class="alert-header">
                                        <div>
                                            <h3 class="font-medium text-light">${alert.symbol}</h3>
                                            <div class="alert-price">
                                                <span>${alert.condition} ${alert.value}</span>
                                                <i class="fas ${isUp ? 'fa-caret-up price-up' : 'fa-caret-down price-down'} alert-direction"></i>
                                                ${isHistory ? '<span class="history-badge">История</span>' : ''}
                                            </div>
                                        </div>
                                    </div>
                                    <p class="text-sm ${isTriggered ? 'text-accent-green' : 'text-gray-400'}">
                                        ${isTriggered ? '✅ Сработал' : '🔄 Активен'} |
                                        Тип: ${alert.type} |
                                        Уведомлений: ${alert.notificationCount === 0 ? '∞' : alert.notificationCount} |
                                        Сработал: ${alert.triggeredCount || 0} раз |
                                        ${isHistory ? 'Сработал: ' : 'Создан: '}${date.toLocaleString()}
                                    </p>
                                </div>
                            </div>
                            <div class="flex space-x-2">
                                ${!isHistory ? `
                                <button onclick="deleteAlert(${alert.id})" class="text-accent-red hover:text-red-300">
                                    <i class="fas fa-times"></i>
                                </button>
                                ${!isTriggered || alert.notificationCount === 0 ? `
                                <button onclick="editAlert(${alert.id})" class="text-primary hover:text-blue-300">
                                    <i class="fas fa-edit"></i>
                                </button>
                                ` : ''}
                                ` : ''}
                                ${isTriggered && !isHistory ? `
                                <button onclick="reactivateAlert(${alert.id})" class="reactivate-btn">
                                    <i class="fas fa-redo"></i> Активировать
                                </button>
                                ` : ''}
                                ${!isHistory && !isTriggered ? `
                                <button onclick="exportAlertToTelegram(${alert.id})" class="export-btn">
                                    <i class="fab fa-telegram"></i> Экспорт
                                </button>
                                ` : ''}
                            </div>
                        </div>
                        <div class="mt-2 flex flex-wrap gap-2">
                            ${alert.notificationMethods.map(method => `
                                <span class="bg-blue-900 text-blue-300 px-2 py-1 rounded-full text-xs">
                                    <i class="${method === 'telegram' ? 'fab fa-telegram' : 'fas fa-envelope'} mr-1"></i>${method === 'telegram' ? 'Telegram' : 'Email'}
                                </span>
                            `).join('')}
                        </div>
                    </div>
                `;
            });

            alertsContainer.innerHTML = html;
        }

        function deleteAlert(alertId) {
            if (confirm('Вы уверены, что хотите удалить этот алерт?')) {
                userAlerts = userAlerts.filter(alert => alert.id !== alertId);
                saveAppState();
                loadUserAlerts(currentAlertFilter);
                showNotification('Успешно', 'Алерт удален');
            }
        }

        function clearAllAlerts() {
            if (confirm('Вы уверены, что хотите удалить все алерты?')) {
                userAlerts = [];
                saveAppState();
                loadUserAlerts(currentAlertFilter);
                showNotification('Успешно', 'Все алерты удалены');
            }
        }

        function editAlert(alertId) {
            const alert = userAlerts.find(a => a.id === alertId);
            if (!alert) return;

            openEditModal(alert);
        }

        function reactivateAlert(alertId) {
            const alert = userAlerts.find(a => a.id === alertId);
            if (!alert) return;

            alert.triggered = false;
            alert.triggeredCount = 0;
            saveAppState();
            loadUserAlerts(currentAlertFilter);
            showNotification('Успешно', 'Алерт снова активен');
        }

        async function exportAlertToTelegram(alertId) {
            const alert = userAlerts.find(a => a.id === alertId);
            if (!alert) return;

            const chatId = localStorage.getItem('tg_chat_id');
            if (!chatId) {
                showBotConnectionHint();
                return;
            }

            const message = `📌 Новый алерт:\nСимвол: ${alert.symbol}\nТип: ${alert.type}\nУсловие: ${alert.condition} ${alert.value}\nУведомлений: ${alert.notificationCount === 0 ? '∞' : alert.notificationCount}`;

            const success = await sendTelegramNotification(message, chatId);
            if (success) {
                showNotification('Успешно', 'Алерт экспортирован в Telegram');
            } else {
                showNotification('Ошибка', 'Не удалось отправить алерт в Telegram');
            }
        }

        function openEditModal(alert) {
            const editModal = document.getElementById('editModal');
            const editFormContent = document.getElementById('editFormContent');

            if (!editModal || !editFormContent) return;

            // Создаем HTML для формы редактирования
            editFormContent.innerHTML = `
                <form id="editAlertForm" class="space-y-4">
                    <input type="hidden" id="editAlertId" value="${alert.id}">

                    <div>
                        <label class="block text-gray-300 text-sm font-medium mb-2">Криптовалюта</label>
                        <input
                            type="text"
                            id="editCoinSearch"
                            value="${alert.symbol}"
                            class="w-full px-3 py-2 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                            readonly
                        >
                        <div id="editMarketTypeHint" class="market-type-hint">
                            ${alert.marketType === 'spot' ? '<span class="spot-badge">SPOT</span>' : '<span class="futures-badge">FUTURES</span>'}
                        </div>
                    </div>

                    <div>
                        <label class="block text-gray-300 text-sm font-medium mb-2">Тип алерта</label>
                        <select id="editAlertType" class="w-full px-3 py-2 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary">
                            <option value="price" ${alert.type === 'price' ? 'selected' : ''}>Цена</option>
                            <option value="liquidation" ${alert.type === 'liquidation' ? 'selected' : ''}>Ликвидации</option>
                            <option value="funding" ${alert.type === 'funding' ? 'selected' : ''}>Фандинг</option>
                            <option value="oi" ${alert.type === 'oi' ? 'selected' : ''}>Открытый интерес</option>
                        </select>
                    </div>

                    <div>
                        <label class="block text-gray-300 text-sm font-medium mb-2">Условие</label>
                        <div class="flex">
                            <select id="editCondition" class="w-1/3 px-3 py-2 rounded-l-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary">
                                <option value="+" ${alert.condition === '+' ? 'selected' : ''}>Выше (+)</option>
                                <option value="-" ${alert.condition === '-' ? 'selected' : ''}>Ниже (-)</option>
                            </select>
                            <input
                                type="number"
                                id="editValue"
                                value="${alert.value}"
                                class="w-2/3 px-3 py-2 border-t border-b border-r rounded-r-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                                placeholder="Значение"
                                step="any"
                                required
                            >
                        </div>
                        <div id="editValueError" class="validation-message">Пожалуйста, укажите значение</div>
                        <div id="editCurrentPriceContainer" class="current-price-container">
                            <span class="current-price-label">Текущая цена:</span>
                            <span id="editCurrentPriceValue" class="current-price-value">Загрузка...</span>
                            <button type="button" onclick="applyCurrentPriceForEdit()" class="apply-price-btn" title="Применить текущую цену">
                                <i class="fas fa-sync-alt"></i>
                                <span>Применить</span>
                            </button>
                        </div>
                    </div>

                    <div>
                        <label class="block text-gray-300 text-sm font-medium mb-2">Количество уведомлений</label>
                        <select id="editNotificationCount" class="w-full px-3 py-2 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary">
                            <option value="5" ${alert.notificationCount === 5 ? 'selected' : ''}>5 раз (интервал 30 сек)</option>
                            <option value="1" ${alert.notificationCount === 1 ? 'selected' : ''}>1 раз (интервал 30 сек)</option>
                            <option value="2" ${alert.notificationCount === 2 ? 'selected' : ''}>2 раза (интервал 30 сек)</option>
                            <option value="3" ${alert.notificationCount === 3 ? 'selected' : ''}>3 раза (интервал 30 сек)</option>
                            <option value="4" ${alert.notificationCount === 4 ? 'selected' : ''}>4 раза (интервал 30 сек)</option>
                            <option value="0" ${alert.notificationCount === 0 ? 'selected' : ''}>Пока не отключу (интервал 30 сек)</option>
                        </select>
                    </div>

                    <div>
                        <label class="block text-gray-300 text-sm font-medium mb-2">Уведомления</label>
                        <div class="notification-methods">
                            <div class="notification-method">
                                <input id="editTelegram" type="checkbox" ${alert.notificationMethods.includes('telegram') ? 'checked' : ''} class="h-4 w-4 focus:ring-primary">
                                <label for="editTelegram" class="ml-2 block text-sm text-gray-300">
                                    <i class="fab fa-telegram mr-1 text-blue-400"></i> Telegram
                                </label>
                                <button onclick="openTelegramSettings()" class="ml-2 text-sm text-blue-400 hover:text-blue-300 text-xs px-2 py-1">
                                    Настроить
                                </button>
                                <input
                                    type="text"
                                    id="editUserChatId"
                                    placeholder="Ваш Chat ID"
                                    class="ml-2 px-2 py-1 text-sm rounded-md ${alert.notificationMethods.includes('telegram') ? '' : 'hidden'}"
                                    value="${alert.chatId || ''}"
                                >
                            </div>
                            <div class="notification-method">
                                <input id="editEmail" type="checkbox" ${alert.notificationMethods.includes('email') ? 'checked' : ''} class="h-4 w-4 focus:ring-primary">
                                <label for="editEmail" class="ml-2 block text-sm text-gray-300">
                                    <i class="fas fa-envelope mr-1 text-gray-400"></i> Email
                                </label>
                                <input
                                    type="email"
                                    id="editUserEmail"
                                    placeholder="Ваш email"
                                    class="ml-2 px-2 py-1 text-sm rounded-md ${alert.notificationMethods.includes('email') ? '' : 'hidden'}"
                                    value="${localStorage.getItem('userEmail') || ''}"
                                >
                                <div id="editUserEmailError" class="validation-message">Неверный формат email</div>
                            </div>
                        </div>
                    </div>

                    <button type="submit" class="btn-primary w-full text-white py-2 px-4 rounded-md font-medium mt-4">
                        <i class="fas fa-save mr-2"></i>Сохранить изменения
                    </button>
                </form>
            `;

            // Получаем текущую цену для отображения
            apiManager.getCurrentPrice(alert.symbol, alert.marketType).then(price => {
                if (price !== null) {
                    const currentPriceValue = document.getElementById('editCurrentPriceValue');
                    if (currentPriceValue) {
                        currentPriceValue.textContent = price;
                    }
                }
            });

            // Назначаем обработчики событий для чекбоксов
            const telegramCheckbox = document.getElementById('editTelegram');
            if (telegramCheckbox) {
                telegramCheckbox.addEventListener('change', function () {
                    const userChatId = document.getElementById('editUserChatId');
                    if (!userChatId) return;

                    if (this.checked) {
                        userChatId.classList.remove('hidden');
                        userChatId.required = true;
                        const savedChatId = localStorage.getItem('tg_chat_id');
                        if (savedChatId) userChatId.value = savedChatId;
                    } else {
                        userChatId.classList.add('hidden');
                        userChatId.required = false;
                    }
                });
            }

            const emailCheckbox = document.getElementById('editEmail');
            if (emailCheckbox) {
                emailCheckbox.addEventListener('change', function () {
                    const userEmail = document.getElementById('editUserEmail');
                    if (!userEmail) return;

                    if (this.checked) {
                        userEmail.classList.remove('hidden');
                        userEmail.required = true;
                        const savedEmail = localStorage.getItem('userEmail');
                        if (savedEmail) userEmail.value = savedEmail;
                    } else {
                        userEmail.classList.add('hidden');
                        userEmail.required = false;
                    }
                });
            }

            // Назначаем обработчик отправки формы
            const editForm = document.getElementById('editAlertForm');
            if (editForm) {
                editForm.addEventListener('submit', function (e) {
                    e.preventDefault();
                    handleEditSubmit(alert.id);
                });
            }

            // Отображаем модальное окно
            editModal.classList.add('active');
        }

        function handleEditSubmit(alertId) {
            if (!validateEditForm()) return;

            const symbol = document.getElementById('editCoinSearch')?.value;
            const type = document.getElementById('editAlertType')?.value;
            const condition = document.getElementById('editCondition')?.value;
            const value = document.getElementById('editValue')?.value;
            const useTelegram = document.getElementById('editTelegram')?.checked;
            const useEmail = document.getElementById('editEmail')?.checked;
            const userEmail = useEmail ? document.getElementById('editUserEmail')?.value : '';
            const userChatId = useTelegram ? document.getElementById('editUserChatId')?.value : '';
            const notificationCount = document.getElementById('editNotificationCount')?.value;

            if (!symbol || !type || !condition || !value || notificationCount === undefined) {
                showNotification('Ошибка', 'Не все обязательные поля заполнены');
                return;
            }

            if (useTelegram && !userChatId && !localStorage.getItem('tg_chat_id')) {
                showNotification('Ошибка', 'Пожалуйста, укажите Telegram Chat ID');
                return;
            }

            if (useEmail && !userEmail) {
                showNotification('Ошибка', 'Пожалуйста, укажите email');
                return;
            }

            const notificationMethods = [];
            if (useTelegram) notificationMethods.push('telegram');
            if (useEmail) notificationMethods.push('email');

            if (notificationMethods.length === 0) {
                showNotification('Ошибка', 'Выберите хотя бы один метод уведомления');
                return;
            }

            // Обновляем алерт
            const updatedAlert = {
                id: parseInt(alertId),
                symbol,
                type,
                condition,
                value: parseFloat(value),
                notificationMethods,
                notificationCount: parseInt(notificationCount),
                chatId: useTelegram ? (localStorage.getItem('tg_chat_id') || userChatId) : null,
                triggeredCount: userAlerts.find(a => a.id === parseInt(alertId))?.triggeredCount || 0,
                createdAt: userAlerts.find(a => a.id === parseInt(alertId))?.createdAt || new Date().toISOString(),
                triggered: false,
                lastNotificationTime: 0,
                marketType: getMarketTypeBySymbol(symbol)
            };

            // Обновляем массив алертов
            userAlerts = userAlerts.map(a => a.id === parseInt(alertId) ? updatedAlert : a);
            saveAppState();

            if (useEmail) {
                localStorage.setItem('userEmail', userEmail);
            }

            // Обновляем интерфейс
            loadUserAlerts(currentAlertFilter);
            showNotification('Успешно', `Алерт для ${symbol} обновлен`);

            // Закрываем модальное окно
            closeEditModal();
        }

        function closeEditModal() {
            const editModal = document.getElementById('editModal');
            const editFormContent = document.getElementById('editFormContent');

            if (editModal) editModal.classList.remove('active');
            if (editFormContent) editFormContent.innerHTML = '';
        }

        async function checkAlerts() {
            const now = Date.now();

            // Проверка доступности бота
            try {
                const response = await fetch(`https://api.telegram.org/bot${TG_BOT_TOKEN}/getMe`);
                if (!response.ok) throw new Error('Бот недоступен');
            } catch (error) {
                console.error('Бот недоступен:', error);
                showNotification('Ошибка', 'Telegram бот недоступен');
                return;
            }

            for (const alert of userAlerts.filter(a => !a.triggered)) {
                try {
                    const price = await apiManager.getCurrentPrice(alert.symbol, alert.marketType);
                    if (price === null) continue;

                    // Проверяем условие срабатывания алерта
                    const conditionMet = checkAlertCondition(alert, price);

                    if (conditionMet) {
                        const cooldownKey = `${alert.symbol}_${alert.condition}_${alert.value}`;
                        const lastNotification = alertCooldowns[cooldownKey] || 0;

                        if (now - lastNotification > 30000) { // 30 секунд кд
                            const message = `🚨 Алерт сработал!\nСимвол: ${alert.symbol}\nУсловие: ${alert.condition} ${alert.value}\nТекущая цена: ${price}`;

                            if (alert.notificationMethods.includes('telegram') && alert.chatId) {
                                await sendTelegramNotification(message, alert.chatId);
                            }

                            alert.triggeredCount++;
                            alertCooldowns[cooldownKey] = now;

                            // Добавляем в активные сработавшие алерты для анимации
                            activeTriggeredAlerts[alert.id] = true;

                            // Через 5 секунд убираем анимацию
                            setTimeout(() => {
                                delete activeTriggeredAlerts[alert.id];
                                loadUserAlerts(currentAlertFilter);
                            }, 5000);

                            // Проверяем лимит уведомлений
                            if (alert.notificationCount > 0 && alert.triggeredCount >= alert.notificationCount) {
                                alert.triggered = true;
                                showNotification('Алерт завершен', `Алерт для ${alert.symbol} достиг лимита уведомлений (${alert.notificationCount})`);
                            }

                            // Сохраняем в историю
                            saveTriggeredAlert(alert);

                            // Показываем уведомление в интерфейсе
                            showNotification('Алерт сработал', `Символ: ${alert.symbol}\nУсловие: ${alert.condition} ${alert.value}\nТекущая цена: ${price}`);

                            // Сохраняем изменения
                            saveAppState();

                            // Обновляем интерфейс
                            loadUserAlerts(currentAlertFilter);
                        }
                    }
                } catch (error) {
                    console.error(`Ошибка проверки алерта ${alert.symbol}:`, error);
                }
            }
        }

        function checkAlertCondition(alert, currentPrice) {
            const condition = alert.condition;
            const value = alert.value;

            switch (alert.type) {
                case 'price':
                    if (condition === '+') {
                        return currentPrice >= value;
                    } else if (condition === '-') {
                        return currentPrice <= value;
                    }
                    break;
                case 'liquidation':
                    // Логика для проверки ликвидаций
                    break;
                case 'funding':
                    // Логика для проверки фандинга
                    break;
                case 'oi':
                    // Логика для проверки открытого интереса
                    break;
                default:
                    return false;
            }
            return false;
        }

        // Telegram settings functions
        function openTelegramSettings() {
            const modal = document.getElementById('telegramSettingsModal');
            const chatIdInput = document.getElementById('telegramChatId');
            const savedChatId = localStorage.getItem('tg_chat_id');

            if (chatIdInput && savedChatId) {
                chatIdInput.value = savedChatId;
            }

            if (modal) {
                modal.classList.add('active');
            }
        }

        function closeTelegramSettings() {
            const modal = document.getElementById('telegramSettingsModal');
            if (modal) {
                modal.classList.remove('active');
            }
        }

        async function saveTelegramSettings() {
            const chatIdInput = document.getElementById('telegramChatId');
            const userChatId = document.getElementById('userChatId');

            if (chatIdInput && userChatId) {
                const chatId = chatIdInput.value.trim();
                if (chatId) {
                    try {
                        // Сохраняем chat_id в localStorage
                        localStorage.setItem('tg_chat_id', chatId);
                        localStorage.setItem('tg_enabled', 'true');
                        userChatId.value = chatId;
                        saveAppState();
                        closeTelegramSettings();
                        closeBotConnectionHint();
                        showNotification('Успех', 'Бот успешно подключен! Теперь вы можете создавать алерты с Telegram уведомлениями.');
                    } catch (error) {
                        console.error('Ошибка:', error);
                        showNotification('Ошибка', 'Не удалось сохранить настройки');
                    }
                } else {
                    showNotification('Ошибка', 'Пожалуйста, укажите Chat ID');
                }
            }
        }

        // Bot connection hint functions
        function showBotConnectionHint() {
            const modal = document.getElementById('botConnectionHint');
            if (modal) modal.classList.add('active');
        }

        function closeBotConnectionHint() {
            const modal = document.getElementById('botConnectionHint');
            if (modal) modal.classList.remove('active');
        }

        // Menu functions
        function toggleMenu() {
            const menuContent = document.getElementById('menuContent');
            if (menuContent) {
                menuContent.classList.toggle('show');
            }
        }

        function showHome() {
            toggleMenu();
            // Перенаправляем на главную страницу
            window.location.href = 'index.html';
        }

        function showCalculator() {
            toggleMenu();
            // Перенаправляем на страницу калькулятора
            window.location.href = 'calculator.html';
        }

        function showAlerts() {
            toggleMenu();
            // Перенаправляем на страницу алертов
            window.location.href = 'alerts.html';
        }

        function showWidget() {
            toggleMenu();
            // Перенаправляем на страницу виджета
            window.location.href = 'widget.html';
        }

        function showLoginForm() {
            toggleMenu();
            const modal = document.getElementById('loginModal');
            if (modal) {
                modal.classList.add('opacity-100', 'pointer-events-auto');
            }
        }

        function closeLoginModal() {
            const modal = document.getElementById('loginModal');
            if (modal) {
                modal.classList.remove('opacity-100', 'pointer-events-auto');
            }
        }

        function showRegisterForm() {
            toggleMenu();
            const modal = document.getElementById('registerModal');
            if (modal) {
                modal.classList.add('opacity-100', 'pointer-events-auto');
            }
        }

        function closeRegisterModal() {
            const modal = document.getElementById('registerModal');
            if (modal) {
                modal.classList.remove('opacity-100', 'pointer-events-auto');
            }
        }

        function resetForm() {
            const alertForm = document.getElementById('alertForm');
            if (alertForm) {
                alertForm.reset();

                // Дополнительные сбросы
                const coinSearch = document.getElementById('coinSearch');
                if (coinSearch) {
                    coinSearch.value = '';
                    coinSearch.focus();
                }

                const symbolSelect = document.getElementById('symbol');
                if (symbolSelect) {
                    symbolSelect.innerHTML = '';
                    symbolSelect.classList.add('hidden');
                }

                const symbolInput = document.getElementById('symbol');
                if (symbolInput) {
                    symbolInput.value = '';
                }

                const marketTypeHint = document.getElementById('marketTypeHint');
                if (marketTypeHint) {
                    marketTypeHint.innerHTML = '';
                }

                const currentPriceContainer = document.getElementById('currentPriceContainer');
                if (currentPriceContainer) {
                    currentPriceContainer.classList.add('hidden');
                }

                const editAlertId = document.getElementById('editAlertId');
                if (editAlertId) {
                    editAlertId.value = '';
                }

                const submitBtnText = document.getElementById('submitBtnText');
                if (submitBtnText) {
                    submitBtnText.textContent = 'Создать алерт';
                }

                // Сбрасываем чекбоксы уведомлений к состоянию по умолчанию
                const telegramCheckbox = document.getElementById('telegram');
                if (telegramCheckbox) {
                    telegramCheckbox.checked = true;
                }

                const emailCheckbox = document.getElementById('email');
                if (emailCheckbox) {
                    emailCheckbox.checked = false;
                }

                // Скрываем дополнительные поля и очищаем их
                const userChatIdInput = document.getElementById('userChatId');
                if (userChatIdInput) {
                    userChatIdInput.value = '';
                    userChatIdInput.classList.add('hidden');
                }

                const userEmailInput = document.getElementById('userEmail');
                if (userEmailInput) {
                    userEmailInput.value = '';
                    userEmailInput.classList.add('hidden');
                }

                // Устанавливаем значение по умолчанию для количества уведомлений
                const notificationCountSelect = document.getElementById('notificationCount');
                if (notificationCountSelect) {
                    notificationCountSelect.value = '5';
                }

                // Очищаем все ошибки валидации
                document.querySelectorAll('.validation-message').forEach(el => {
                    el.style.display = 'none';
                });
                document.querySelectorAll('.validation-error').forEach(el => {
                    el.classList.remove('validation-error');
                });
            }
        }

        function setupEventListeners() {
            const coinSearch = document.getElementById('coinSearch');
            if (coinSearch) {
                coinSearch.addEventListener('input', function () {
                    updateCoinSelect();

                    const symbol = this.value.trim().toUpperCase();
                    const hint = document.getElementById('marketTypeHint');

                    if (symbol.length >= 2) {
                        const marketType = getMarketTypeBySymbol(symbol);
                        if (marketType) {
                            const badge = marketType === 'spot' ?
                                '<span class="spot-badge">SPOT</span>' :
                                '<span class="futures-badge">FUTURES</span>';
                            if (hint) hint.innerHTML = badge;
                        } else {
                            if (hint) hint.innerHTML = '';
                        }
                    } else {
                        if (hint) hint.innerHTML = '';
                    }
                });
            }

            const symbolSelect = document.getElementById('symbol');
            if (symbolSelect) {
                symbolSelect.addEventListener('change', function () {
                    const symbol = this.value;
                    const selectedOption = this.options[this.selectedIndex];
                    const marketType = selectedOption.getAttribute('data-market-type');

                    this.classList.add('hidden');
                    const coinSearch = document.getElementById('coinSearch');
                    if (coinSearch) coinSearch.value = symbol;

                    const badge = marketType === 'spot' ?
                        '<span class="spot-badge">SPOT</span>' :
                        '<span class="futures-badge">FUTURES</span>';
                    const hint = document.getElementById('marketTypeHint');
                    if (hint) hint.innerHTML = badge;

                    // Скрываем ошибку валидации при выборе из списка
                    hideValidationError('coinSearch');

                    // Получаем текущую цену и показываем её
                    apiManager.getCurrentPrice(symbol, marketType).then(price => {
                        if (price !== null) {
                            const currentPriceContainer = document.getElementById('currentPriceContainer');
                            const currentPriceValue = document.getElementById('currentPriceValue');
                            if (currentPriceContainer && currentPriceValue) {
                                currentPriceValue.textContent = price;
                                currentPriceContainer.classList.remove('hidden');
                            }
                        }
                    });
                });
            }

            const telegramCheckbox = document.getElementById('telegram');
            if (telegramCheckbox) {
                telegramCheckbox.addEventListener('change', function () {
                    const userChatId = document.getElementById('userChatId');
                    if (!userChatId) return;

                    if (this.checked) {
                        userChatId.classList.remove('hidden');
                        userChatId.required = true;
                        // Проверяем сохраненный chat_id
                        const savedChatId = localStorage.getItem('tg_chat_id');
                        if (savedChatId) userChatId.value = savedChatId;
                    } else {
                        userChatId.classList.add('hidden');
                        userChatId.required = false;
                    }

                    localStorage.setItem('tg_enabled', this.checked);
                    saveAppState();
                });
            }

            const emailCheckbox = document.getElementById('email');
            if (emailCheckbox) {
                emailCheckbox.addEventListener('change', function () {
                    const userEmail = document.getElementById('userEmail');
                    if (!userEmail) return;

                    if (this.checked) {
                        userEmail.classList.remove('hidden');
                        userEmail.required = true;
                        // Проверяем сохраненный email
                        const savedEmail = localStorage.getItem('userEmail');
                        if (savedEmail) userEmail.value = savedEmail;
                    } else {
                        userEmail.classList.add('hidden');
                        userEmail.required = false;
                    }
                });
            }

            const alertForm = document.getElementById('alertForm');
            if (alertForm) {
                alertForm.addEventListener('submit', async function (e) {
                    e.preventDefault();

                    // Добавляем проверку подключения к боту
                    const telegramCheckbox = document.getElementById('telegram');
                    if (telegramCheckbox && telegramCheckbox.checked && !localStorage.getItem('tg_chat_id')) {
                        showBotConnectionHint();
                        return;
                    }

                    // Валидация формы
                    if (!validateForm()) return;

                    const symbol = document.getElementById('symbol')?.value;
                    const alertType = document.getElementById('alertType')?.value;
                    const condition = document.getElementById('condition')?.value;
                    const value = document.getElementById('value')?.value;
                    const useTelegram = document.getElementById('telegram')?.checked;
                    const useEmail = document.getElementById('email')?.checked;
                    const userEmail = useEmail ? document.getElementById('userEmail')?.value : '';
                    const userChatId = useTelegram ? document.getElementById('userChatId')?.value : '';
                    const notificationCount = document.getElementById('notificationCount')?.value;

                    if (!symbol || !alertType || !condition || !value || notificationCount === undefined) {
                        showNotification('Ошибка', 'Не все обязательные поля заполнены');
                        return;
                    }

                    if (useTelegram && !userChatId && !localStorage.getItem('tg_chat_id')) {
                        showNotification('Ошибка', 'Пожалуйста, укажите Telegram Chat ID');
                        return;
                    }

                    if (useEmail && !userEmail) {
                        showNotification('Ошибка', 'Пожалуйста, укажите email');
                        return;
                    }

                    const notificationMethods = [];
                    if (useTelegram) notificationMethods.push('telegram');
                    if (useEmail) notificationMethods.push('email');

                    if (notificationMethods.length === 0) {
                        showNotification('Ошибка', 'Выберите хотя бы один метод уведомления');
                        return;
                    }

                    const editAlertId = document.getElementById('editAlertId')?.value;
                    if (editAlertId) {
                        // Редактирование существующего алерта
                        const updatedAlert = {
                            id: parseInt(editAlertId),
                            symbol,
                            type: alertType,
                            condition,
                            value: parseFloat(value),
                            notificationMethods,
                            notificationCount: parseInt(notificationCount),
                            chatId: useTelegram ? (localStorage.getItem('tg_chat_id') || userChatId) : null,
                            triggeredCount: userAlerts.find(a => a.id === parseInt(editAlertId))?.triggeredCount || 0,
                            createdAt: userAlerts.find(a => a.id === parseInt(editAlertId))?.createdAt || new Date().toISOString(),
                            triggered: false,
                            lastNotificationTime: 0,
                            marketType: getMarketTypeBySymbol(symbol)
                        };

                        userAlerts = userAlerts.map(a => a.id === parseInt(editAlertId) ? updatedAlert : a);
                        saveAppState();

                        if (useEmail) {
                            localStorage.setItem('userEmail', userEmail);
                        }

                        loadUserAlerts(currentAlertFilter);
                        showNotification('Успешно', `Алерт для ${symbol} обновлен`);
                        resetForm();
                    } else {
                        // Создание нового алерта
                        const success = await addUserAlert(symbol, alertType, condition, value, notificationMethods, notificationCount, userChatId);
                        if (success) {
                            showNotification('Успешно', `Алерт для ${symbol} создан`);
                            resetForm();
                            // Обновляем список алертов
                            loadUserAlerts(currentAlertFilter);
                        }
                    }
                });
            }

            const clearAlertsBtn = document.getElementById('clearAlerts');
            if (clearAlertsBtn) {
                clearAlertsBtn.addEventListener('click', clearAllAlerts);
            }

            const exportAllAlertsBtn = document.getElementById('exportAllAlerts');
            if (exportAllAlertsBtn) {
                exportAllAlertsBtn.addEventListener('click', exportAllActiveAlerts);
            }

            const closeNotificationBtn = document.getElementById('closeNotification');
            if (closeNotificationBtn) {
                closeNotificationBtn.addEventListener('click', function () {
                    const notificationModal = document.getElementById('notificationModal');
                    if (notificationModal) notificationModal.classList.add('hidden');
                });
            }

            // Обработчики для кнопок фильтрации алертов
            const showActiveAlertsBtn = document.getElementById('showActiveAlerts');
            if (showActiveAlertsBtn) {
                showActiveAlertsBtn.addEventListener('click', () => loadUserAlerts('active'));
            }

            const showTriggeredAlertsBtn = document.getElementById('showTriggeredAlerts');
            if (showTriggeredAlertsBtn) {
                showTriggeredAlertsBtn.addEventListener('click', () => loadUserAlerts('triggered'));
            }

            const showHistoryAlertsBtn = document.getElementById('showHistoryAlerts');
            if (showHistoryAlertsBtn) {
                showHistoryAlertsBtn.addEventListener('click', () => loadUserAlerts('history'));
            }

            const showAllAlertsBtn = document.getElementById('showAllAlerts');
            if (showAllAlertsBtn) {
                showAllAlertsBtn.addEventListener('click', () => loadUserAlerts('all'));
            }

            // Обработчик для импорта алертов из файла (только фьючерсы)
            const bulkImportFile = document.getElementById('bulkImportFile');
            if (bulkImportFile) {
                bulkImportFile.addEventListener('change', async function (event) {
                    const file = event.target.files[0];
                    if (!file) return;

                    const reader = new FileReader();
                    reader.onload = async function (e) {
                        const content = e.target.result;
                        const lines = content.split('\n');
                        let importedCount = 0;
                        let skippedCount = 0;

                        // Получаем текущие настройки уведомлений
                        const useTelegram = document.getElementById('telegram')?.checked || false;
                        const useEmail = document.getElementById('email')?.checked || false;
                        const userChatId = useTelegram ? (localStorage.getItem('tg_chat_id') || document.getElementById('userChatId')?.value) : null;
                        const userEmail = useEmail ? document.getElementById('userEmail')?.value : null;
                        const notificationCount = document.getElementById('notificationCount')?.value || '5';
                        const alertType = document.getElementById('alertType')?.value || 'price';

                        const notificationMethods = [];
                        if (useTelegram) notificationMethods.push('telegram');
                        if (useEmail) notificationMethods.push('email');

                        if (notificationMethods.length === 0) {
                            showNotification('Ошибка', 'Выберите хотя бы один метод уведомлений перед импортом');
                            return;
                        }

                        // Проверяем подключение к боту если Telegram выбран
                        if (notificationMethods.includes('telegram') && !userChatId) {
                            showBotConnectionHint();
                            return;
                        }

                        for (const line of lines) {
                            const trimmedLine = line.trim();
                            if (!trimmedLine) continue;

                            const parts = trimmedLine.split(/\s+/);
                            if (parts.length < 3) {
                                skippedCount++;
                                continue;
                            }

                            const symbol = parts[0].toUpperCase();
                            const condition = parts[1];
                            const value = parts[2];

                            if (condition !== '+' && condition !== '-') {
                                skippedCount++;
                                continue;
                            }

                            if (isNaN(parseFloat(value))) {
                                skippedCount++;
                                continue;
                            }

                            // Проверяем что символ является фьючерсным
                            const isFutures = allFutures.some(f => f.symbol === symbol);
                            if (!isFutures) {
                                skippedCount++;
                                continue;
                            }

                            // Добавляем алерт
                            const success = await addUserAlert(
                                symbol,
                                alertType,
                                condition,
                                parseFloat(value),
                                notificationMethods,
                                notificationCount,
                                userChatId
                            );

                            if (success) {
                                importedCount++;
                            } else {
                                skippedCount++;
                            }
                        }

                        showNotification('Импорт завершен',
                            `Успешно импортировано ${importedCount} фьючерсных алертов\n` +
                            `Пропущено: ${skippedCount} (не фьючерсы или ошибки формата)`);

                        loadUserAlerts(currentAlertFilter);

                        // Сбрасываем значение input файла, чтобы можно было загрузить тот же файл снова
                        event.target.value = '';
                    };
                    reader.readAsText(file);
                });
            }

            // Обработчик для меню
            const menuButton = document.getElementById('menuButton');
            if (menuButton) {
                menuButton.addEventListener('click', toggleMenu);
            }

            // Закрываем меню при клике вне его
            window.addEventListener('click', function (event) {
                const menuContent = document.getElementById('menuContent');
                const menuButton = document.getElementById('menuButton');

                if (menuContent && menuButton &&
                    !menuContent.contains(event.target) &&
                    !menuButton.contains(event.target)) {
                    menuContent.classList.remove('show');
                }
            });

            // Calculator Event Listeners
            const longBtn = document.getElementById('longBtn');
            const shortBtn = document.getElementById('shortBtn');
            const entryPriceInput = document.getElementById('entryPrice');
            const entryPriceResult = document.getElementById('entryPriceResult');
            const leverageInput = document.getElementById('leverage');
            const leverageValue = document.getElementById('leverageValue');
            const leverageWarning = document.getElementById('leverageWarning');
            const atrInput = document.getElementById('atr');
            const riskPercentInput = document.getElementById('riskPercent');
            const riskPercentValue = document.getElementById('riskPercentValue');
            const riskAmountInput = document.getElementById('riskAmount');
            const rewardRatio1Input = document.getElementById('rewardRatio1');
            const rewardRatio1Value = document.getElementById('rewardRatio1Value');
            const rewardRatio2Input = document.getElementById('rewardRatio2');
            const rewardRatio2Value = document.getElementById('rewardRatio2Value');
            const atrValueSpan = document.getElementById('atrValue');
            const previewAtrPercent = document.getElementById('previewAtrPercent');
            const previewAtrPercentValue = document.getElementById('previewAtrPercentValue');
            const stopLossPriceInput = document.getElementById('stopLossPrice');
            const priceDifferenceSpan = document.getElementById('priceDifference');

            // Элементы результатов
            const positionSizeSpan = document.getElementById('positionSize');
            const stopLossSpan = document.getElementById('stopLoss');
            const atrResultSpan = document.getElementById('atrResult');
            const takeProfitLevelsDiv = document.getElementById('takeProfitLevels');
            const liquidationPriceSpan = document.getElementById('liquidationPrice');

            // Переменные состояния
            let isLong = true;
            let stopMethod = 'atr';
            let tradeType = 'long-breakout';

            // Инициализация калькулятора
            function initCalculator() {
                // Установка плеча по умолчанию на 10
                leverageInput.value = 10;
                leverageValue.textContent = '10x';

                updateSliderValues();
                updateAtrPreview();
                calculateRisk();

                // Назначение обработчиков событий
                longBtn.addEventListener('click', () => {
                    isLong = true;
                    longBtn.classList.add('active');
                    shortBtn.classList.remove('active');

                    // Обновляем кнопки типа сделки
                    updateTradeTypeButtons();
                    calculateRisk();
                });

                shortBtn.addEventListener('click', () => {
                    isLong = false;
                    shortBtn.classList.add('active');
                    longBtn.classList.remove('active');

                    // Обновляем кнопки типа сделки
                    updateTradeTypeButtons();
                    calculateRisk();
                });

                // Обработчики для кнопок типа сделки
                const tradeTypeButtons = document.querySelectorAll('.trade-type-btn');
                tradeTypeButtons.forEach(button => {
                    button.addEventListener('click', () => {
                        tradeType = button.dataset.type;

                        // Обновляем активные кнопки
                        tradeTypeButtons.forEach(btn => btn.classList.remove('active'));
                        button.classList.add('active');

                        calculateRisk();
                    });
                });

                entryPriceInput.addEventListener('input', calculateRisk);
                leverageInput.addEventListener('input', () => {
                    leverageValue.textContent = leverageInput.value + 'x';
                    if (leverageInput.value > 10) {
                        leverageWarning.style.display = 'block';
                    } else {
                        leverageWarning.style.display = 'none';
                    }
                    calculateRisk();
                });
                atrInput.addEventListener('input', () => {
                    updateAtrPreview();
                    calculateRisk();
                });
                riskPercentInput.addEventListener('input', () => {
                    updateSliderValues();
                    updateAtrPreview();
                    calculateRisk();
                });
                riskAmountInput.addEventListener('input', calculateRisk);
                rewardRatio1Input.addEventListener('input', () => {
                    updateSliderValues();
                    calculateRisk();
                });
                rewardRatio2Input.addEventListener('input', () => {
                    updateSliderValues();
                    calculateRisk();
                });

                // Обработчики для переключателя метода ввода стоп-лосса
                const stopMethodButtons = document.querySelectorAll('.stop-method-btn');
                stopMethodButtons.forEach(button => {
                    button.addEventListener('click', () => {
                        stopMethod = button.dataset.method;

                        // Обновляем активные кнопки и группы ввода
                        stopMethodButtons.forEach(btn => btn.classList.remove('active'));
                        button.classList.add('active');

                        document.getElementById('atr-group').classList.remove('active');
                        document.getElementById('price-group').classList.remove('active');

                        if (stopMethod === 'atr') {
                            document.getElementById('atr-group').classList.add('active');
                        } else {
                            document.getElementById('price-group').classList.add('active');
                        }

                        calculateRisk();
                    });
                });

                // Обработчик для прямого ввода цены стоп-лосса
                stopLossPriceInput.addEventListener('input', () => {
                    const entryPrice = parseFloat(entryPriceInput.value) || 0;
                    const stopLossPrice = parseFloat(stopLossPriceInput.value) || 0;

                    if (entryPrice > 0 && stopLossPrice > 0) {
                        const difference = Math.abs(entryPrice - stopLossPrice);
                        priceDifferenceSpan.textContent = difference.toFixed(8) + ' USDT';
                    } else {
                        priceDifferenceSpan.textContent = '0.00 USDT';
                    }

                    calculateRisk();
                });

                // Инициализация кнопки экспорта
                document.getElementById('exportTextBtn').addEventListener('click', exportToText);
                document.getElementById('exportTelegramBtn').addEventListener('click', sendToTelegram);
            }

            // Обновление кнопок типа сделки в зависимости от направления
            function updateTradeTypeButtons() {
                const tradeTypeSelector = document.getElementById('tradeTypeSelector');
                tradeTypeSelector.style.display = 'flex';

                const longBreakoutBtn = document.querySelector('.trade-type-btn.long-breakout');
                const longFakeoutBtn = document.querySelector('.trade-type-btn.long-fakeout');
                const shortBreakoutBtn = document.querySelector('.trade-type-btn.short-breakout');
                const shortFakeoutBtn = document.querySelector('.trade-type-btn.short-fakeout');

                if (isLong) {
                    // Показываем только лонг кнопки
                    longBreakoutBtn.style.display = '';
                    longFakeoutBtn.style.display = '';
                    shortBreakoutBtn.style.display = 'none';
                    shortFakeoutBtn.style.display = 'none';

                    // Активируем лонг пробой по умолчанию
                    tradeType = 'long-breakout';
                    longBreakoutBtn.classList.add('active');
                    longFakeoutBtn.classList.remove('active');
                } else {
                    // Показываем только шорт кнопки
                    longBreakoutBtn.style.display = 'none';
                    longFakeoutBtn.style.display = 'none';
                    shortBreakoutBtn.style.display = '';
                    shortFakeoutBtn.style.display = '';

                    // Активируем шорт пробой по умолчанию
                    tradeType = 'short-breakout';
                    shortBreakoutBtn.classList.add('active');
                    shortFakeoutBtn.classList.remove('active');
                }
            }

            // Обновление значений слайдеров
            function updateSliderValues() {
                riskPercentValue.textContent = riskPercentInput.value;
                rewardRatio1Value.textContent = rewardRatio1Input.value;
                rewardRatio2Value.textContent = rewardRatio2Input.value;
            }

            // Предварительный просмотр ATR
            function updateAtrPreview() {
                const atr = parseFloat(atrInput.value) || 0;
                const riskPercent = parseFloat(riskPercentInput.value) / 100;

                // Отображаем точное значение ATR без округления
                atrValueSpan.textContent = atr + ' USDT';
                previewAtrPercent.textContent = (atr * riskPercent) + ' USDT';
            }

            // Расчет цены ликвидации
            function calculateLiquidationPrice(entryPrice, leverage, isLong) {
                if (isLong) {
                    return entryPrice * (1 - (1 / leverage));
                } else {
                    return entryPrice * (1 + (1 / leverage));
                }
            }

            // Основная функция расчета
            function calculateRisk() {
                const entryPrice = parseFloat(entryPriceInput.value) || 0;
                const leverage = parseFloat(leverageInput.value) || 1;
                const atr = parseFloat(atrInput.value) || 0;
                const riskPercent = parseFloat(riskPercentInput.value) / 100;
                const riskAmount = parseFloat(riskAmountInput.value) || 0;
                const rewardRatio1 = parseFloat(rewardRatio1Input.value) || 3;
                const rewardRatio2 = parseFloat(rewardRatio2Input.value) || 5;
                const stopLossPriceDirect = parseFloat(stopLossPriceInput.value) || 0;

                // Расчет стоп-лосса в зависимости от выбранного метода
                let stopLossPrice;
                if (stopMethod === 'atr') {
                    if (isLong) {
                        stopLossPrice = entryPrice - (atr * riskPercent);
                    } else {
                        stopLossPrice = entryPrice + (atr * riskPercent);
                    }
                } else {
                    // Проверяем корректность введенной цены стоп-лосса
                    if (stopLossPriceDirect > 0) {
                        if ((isLong && stopLossPriceDirect < entryPrice) ||
                            (!isLong && stopLossPriceDirect > entryPrice)) {
                            stopLossPrice = stopLossPriceDirect;
                        } else {
                            // Некорректная цена стоп-лосса - используем расчет через ATR
                            if (isLong) {
                                stopLossPrice = entryPrice - (atr * riskPercent);
                            } else {
                                stopLossPrice = entryPrice + (atr * riskPercent);
                            }
                            // Обновляем поле ввода
                            stopLossPriceInput.value = stopLossPrice.toFixed(8);
                        }
                    } else {
                        // Если цена стоп-лосса не введена, используем расчет через ATR
                        if (isLong) {
                            stopLossPrice = entryPrice - (atr * riskPercent);
                        } else {
                            stopLossPrice = entryPrice + (atr * riskPercent);
                        }
                    }
                }

                // Расчет размера позиции (без учета плеча)
                const priceDifference = Math.abs(entryPrice - stopLossPrice);
                const positionSize = priceDifference > 0 ? (riskAmount / priceDifference) : 0;

                // Расчет цены ликвидации
                const liquidationPrice = calculateLiquidationPrice(entryPrice, leverage, isLong);

                // Обновление интерфейса
                entryPriceResult.textContent = `${entryPrice} USDT`;
                positionSizeSpan.textContent = formatNumber(positionSize);
                stopLossSpan.textContent = `${formatNumber(stopLossPrice)} USDT`;
                atrResultSpan.textContent = `${atr} USDT`;
                liquidationPriceSpan.textContent = `${formatNumber(liquidationPrice)} USDT`;

                // Генерация уровней тейк-профита
                generateTakeProfitLevels(entryPrice, stopLossPrice, isLong, rewardRatio1, rewardRatio2, positionSize);
            }

            // Форматирование числа
            function formatNumber(num) {
                if (Math.abs(num) < 0.0001 || Math.abs(num) > 1000000) {
                    return num.toExponential(6);
                }
                // Проверяем, есть ли дробная часть
                if (num % 1 !== 0) {
                    // Округляем до 8 знаков после запятой, если нужно
                    const str = num.toString();
                    const decimalIndex = str.indexOf('.');
                    if (decimalIndex !== -1 && str.length - decimalIndex > 8) {
                        return num.toFixed(8).replace(/(\.?0+)$/, '');
                    }
                }
                return num.toString();
            }

            // Генерация уровней тейк-профита
            function generateTakeProfitLevels(entryPrice, stopLossPrice, isLong, ratio1, ratio2, positionSize) {
                takeProfitLevelsDiv.innerHTML = '';

                // Создаем массив уровней тейк-профита
                const levels = [ratio1, ratio2];

                levels.forEach(ratio => {
                    let takeProfitPrice;
                    if (isLong) {
                        takeProfitPrice = entryPrice + (entryPrice - stopLossPrice) * ratio;
                    } else {
                        takeProfitPrice = entryPrice - (stopLossPrice - entryPrice) * ratio;
                    }

                    const profit = positionSize * Math.abs(takeProfitPrice - entryPrice);

                    const levelDiv = document.createElement('div');
                    levelDiv.className = 'take-profit-item';
                    levelDiv.innerHTML = `
                        <span class="take-profit-ratio">Тейк-профит (1:${ratio}):</span>
                        <span class="take-profit-price">${formatNumber(takeProfitPrice)} USDT</span>
                        <span class="take-profit-value">+${formatNumber(profit)} USDT</span>
                    `;
                    takeProfitLevelsDiv.appendChild(levelDiv);
                });
            }

            // Экспорт в текстовый файл
            function exportToText() {
                const entryPrice = parseFloat(entryPriceInput.value) || 0;
                const leverage = parseFloat(leverageInput.value) || 1;
                const atr = parseFloat(atrInput.value) || 0;
                const riskPercent = parseFloat(riskPercentInput.value) || 0;
                const riskAmount = parseFloat(riskAmountInput.value) || 0;
                const rewardRatio1 = parseFloat(rewardRatio1Input.value) || 3;
                const rewardRatio2 = parseFloat(rewardRatio2Input.value) || 5;
                const stopLossPriceDirect = parseFloat(stopLossPriceInput.value) || 0;

                // Получаем название типа сделки
                let tradeTypeName = '';
                switch (tradeType) {
                    case 'long-breakout':
                        tradeTypeName = 'Лонг Пробой';
                        break;
                    case 'long-fakeout':
                        tradeTypeName = 'Лонг Ложный пробой';
                        break;
                    case 'short-breakout':
                        tradeTypeName = 'Шорт Пробой';
                        break;
                    case 'short-fakeout':
                        tradeTypeName = 'Шорт Ложный пробой';
                        break;
                }

                const content = `
Калькулятор рисков - Результаты
===============================
Дата: ${new Date().toLocaleString()}
Направление: ${isLong ? 'Лонг' : 'Шорт'}
Тип сделки: ${tradeTypeName}
Метод ввода стоп-лосса: ${stopMethod === 'atr' ? 'По ATR' : 'По цене'}

Параметры сделки:
-----------------
Цена входа: ${entryPrice} USDT
Кредитное плечо: ${leverage}x
ATR: ${atr} USDT
Риск стоп-лосс: ${riskPercent}% от ATR
Риск на сделку: ${riskAmount} USDT
Соотношение тейк-профита: 1:${rewardRatio1} и 1:${rewardRatio2}

Результаты:
-----------
Цена входа: ${entryPrice} USDT
Размер позиции: ${positionSizeSpan.textContent}
Стоп-лосс: ${stopLossSpan.textContent}

Уровни тейк-профита:
${Array.from(takeProfitLevelsDiv.children).map(el =>
    '• ' + el.textContent.trim().replace(/\s+/g, ' ')
).join('\n')}

Цена ликвидации: ${liquidationPriceSpan.textContent}
                `;

                const blob = new Blob([content], { type: 'text/plain' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'расчет_рисков.txt';
                a.click();
                URL.revokeObjectURL(url);
            }

            // Функция для отправки в Telegram
            async function sendToTelegram() {
                const botToken = '8044055704:AAGk8cQFayPqYCscLlEB3qGRj0Uw_NTpe30';
                const chatId = '1720793889';

                const entryPrice = parseFloat(document.getElementById('entryPrice').value) || 0;
                const leverage = parseFloat(document.getElementById('leverage').value) || 1;
                const atr = parseFloat(document.getElementById('atr').value) || 0;
                const riskPercent = parseFloat(document.getElementById('riskPercent').value) || 0;
                const riskAmount = parseFloat(document.getElementById('riskAmount').value) || 0;

                // Получаем название типа сделки
                let tradeTypeName = '';
                switch (tradeType) {
                    case 'long-breakout':
                        tradeTypeName = 'Лонг Пробой';
                        break;
                    case 'long-fakeout':
                        tradeTypeName = 'Лонг Ложный пробой';
                        break;
                    case 'short-breakout':
                        tradeTypeName = 'Шорт Пробой';
                        break;
                    case 'short-fakeout':
                        tradeTypeName = 'Шорт Ложный пробой';
                        break;
                }

                // Формируем текст сообщения
                const messageText = `
📊 *Результаты расчета позиции* 📊

*Направление:* ${isLong ? 'Лонг' : 'Шорт'} (${tradeTypeName})
*Цена входа:* ${entryPrice} USDT
*Плечо:* ${leverage}x
*ATR:* ${atr} USDT
*Риск стоп-лосс:* ${riskPercent}%
*Риск на сделку:* ${riskAmount} USDT

*Размер позиции:* ${document.getElementById('positionSize').textContent}
*Стоп-лосс:* ${document.getElementById('stopLoss').textContent}

*Тейк-профиты:*
${Array.from(document.getElementById('takeProfitLevels').children).map(el =>
    '• ' + el.textContent.trim().replace(/\s+/g, ' ')
).join('\n')}

*Цена ликвидации:* ${document.getElementById('liquidationPrice').textContent}

#${isLong ? 'Long' : 'Short'} #${tradeType.replace('-', '')} #RiskManagement
                `;

                try {
                    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            chat_id: chatId,
                            text: messageText,
                            parse_mode: 'Markdown'
                        })
                    });

                    const data = await response.json();

                    if (data.ok) {
                        showNotification('Расчет успешно отправлен в Telegram!', 'success');
                    } else {
                        showNotification('Ошибка при отправке: ' + (data.description || 'неизвестная ошибка'), 'error');
                    }
                } catch (error) {
                    showNotification('Ошибка соединения: ' + error.message, 'error');
                }
            }

            // Запуск приложения
            initCalculator();
        }

        // Калькулятор среднего
        function calculateAverage() {
            const input = document.getElementById('numbersInput').value.trim();
            const resultDiv = document.getElementById('result');

            if (!input) {
                resultDiv.innerHTML = '<p style="color: #F44336;">Введите числа!</p>';
                return;
            }

            let numbers;
            try {
                // Разбиваем строку на числа, учитывая как точку, так и запятую в качестве разделителя
                numbers = input.split(' ')
                    .map(num => num.replace(',', '.')) // заменяем запятые на точки
                    .filter(num => num !== '') // удаляем пустые строки
                    .map(num => {
                        // Преобразуем строку в число
                        const parsed = parseFloat(num);
                        if (isNaN(parsed)) {
                            throw new Error();
                        }
                        return parsed;
                    });

                if (numbers.length === 0) {
                    throw new Error();
                }
            } catch {
                resultDiv.innerHTML = '<p style="color: #F44336;">Ошибка: вводите только числа, разделённые пробелами!</p>';
                return;
            }

            const sum = numbers.reduce((sum, num) => sum + num, 0);
            const count = numbers.length;
            const mean = sum / count;
            const deviations = numbers.map(num => num - mean);

            // Функция для форматирования чисел - показывает до 8 знаков после запятой, если нужно
            const formatNumber = (num) => {
                if (Math.abs(num) < 0.0001 || Math.abs(num) > 1000000) {
                    return num.toExponential(6);
                }
                // Проверяем, есть ли дробная часть
                if (num % 1 !== 0) {
                    // Округляем до 8 знаков после запятой, если нужно
                    const str = num.toString();
                    const decimalIndex = str.indexOf('.');
                    if (decimalIndex !== -1 && str.length - decimalIndex > 8) {
                        return num.toFixed(8).replace(/(\.?0+)$/, '');
                    }
                }
                return num.toString();
            };

            resultDiv.innerHTML = `
                <div style="background: rgba(30,30,30,0.5); padding: 10px; border-radius: 5px;">
                    <p><strong>Чисел:</strong> ${count}</p>
                    <p><strong>Сумма:</strong> ${formatNumber(sum)}</p>
                    <p><strong>Среднее:</strong> ${formatNumber(mean)}</p>
                    <p><strong>Отклонения:</strong></p>
                    <ul style="padding-left: 20px;">
                        ${numbers.map((num, i) =>
                `<li>${formatNumber(num)} - ${formatNumber(mean)} = ${formatNumber(deviations[i])}</li>`
            ).join('')}
                    </ul>
                </div>
            `;
        }

        // Предпосылки functions
        let currentVisibleText = null;
        const botToken = '8044055704:AAGk8cQFayPqYCscLlEB3qGRj0Uw_NTpe30';
        const chatId = '1720793889';

        function toggleText(type) {
            // Hide all text displays
            document.querySelectorAll('.text-display').forEach(el => el.style.display = 'none');

            if (currentVisibleText === type) {
                // If clicking the same button, hide everything
                currentVisibleText = null;
                document.getElementById('actionButtons').style.display = 'none';
            } else {
                // Show the selected text
                document.getElementById(`${type}Text`).style.display = 'block';
                currentVisibleText = type;
                document.getElementById('actionButtons').style.display = 'flex';
            }
        }

        function getSelectedItems() {
            let selectedItems = [];
            let container = document.getElementById(`${currentVisibleText}Text`);

            if (!container) return [];

            const checkboxes = container.querySelectorAll('input[type="checkbox"]:checked');
            checkboxes.forEach((checkbox, index) => {
                const itemText = checkbox.nextElementSibling.textContent.trim();
                selectedItems.push(`${index + 1}. ${itemText}`);
            });

            return selectedItems;
        }

        function copySelectedText() {
            const selectedItems = getSelectedItems();

            if (selectedItems.length === 0) {
                showStatus('Выберите хотя бы один пункт для копирования', 3000, 'error');
                return;
            }

            let textToCopy = '';
            if (currentVisibleText === 'breakthrough') {
                textToCopy = 'Пробой\n📊Предпосылки\n';
            } else if (currentVisibleText === 'falseBreakthrough') {
                textToCopy = 'Ложный пробой\n📊Предпосылки\n';
            } else if (currentVisibleText === 'breakthroughMinuses') {
                textToCopy = 'Пробой минусы\n⛔️ Минусы\n';
            } else if (currentVisibleText === 'falseBreakthroughMinuses') {
                textToCopy = 'Ложный пробой минусы\n⛔️ Минусы\n';
            }

            textToCopy += selectedItems.join('\n');

            navigator.clipboard.writeText(textToCopy)
                .then(() => {
                    showStatus('Выбранные пункты скопированы!', 3000, 'success');
                })
                .catch(err => {
                    showStatus('Не удалось скопировать текст: ' + err, 5000, 'error');
                });
        }

        function exportSelectedToTelegram() {
            const selectedItems = getSelectedItems();

            if (selectedItems.length === 0) {
                showStatus('Выберите хотя бы один пункт для отправки', 3000, 'error');
                return;
            }

            let textToSend = '';
            if (currentVisibleText === 'breakthrough') {
                textToSend = 'Пробой\n📊Предпосылки\n';
            } else if (currentVisibleText === 'falseBreakthrough') {
                textToSend = 'Ложный пробой\n📊Предпосылки\n';
            } else if (currentVisibleText === 'breakthroughMinuses') {
                textToSend = 'Пробой минусы\n⛔️ Минусы\n';
            } else if (currentVisibleText === 'falseBreakthroughMinuses') {
                textToSend = 'Ложный пробой минусы\n⛔️ Минусы\n';
            }

            textToSend += selectedItems.join('\n');

            fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: chatId,
                    text: textToSend
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.ok) {
                    showStatus('Выбранные пункты успешно отправлены в Telegram!', 3000, 'success');
                } else {
                    showStatus('Ошибка при отправке: ' + data.description, 5000, 'error');
                }
            })
            .catch(error => {
                showStatus('Ошибка: ' + error.message, 5000, 'error');
            });
        }

        function showStatus(message, duration, type) {
            const statusElement = document.getElementById('statusMessage');
            statusElement.textContent = message;
            statusElement.className = 'status-message ' + type;
            statusElement.style.display = 'block';

            setTimeout(() => {
                statusElement.style.display = 'none';
            }, duration);
        }

        // Инициализация приложения
        document.addEventListener('DOMContentLoaded', async () => {
            apiManager = new BinanceAPIManager();

            try {
                await apiManager.init();
                loadAppState();
                setupEventListeners();
                await loadMarketData();
                loadUserAlerts(currentAlertFilter);

                // Проверяем сохраненный chat_id
                const savedChatId = localStorage.getItem('tg_chat_id');
                if (savedChatId) {
                    const userChatId = document.getElementById('userChatId');
                    if (userChatId) userChatId.value = savedChatId;
                }

                // Проверяем сохраненный email
                const savedEmail = localStorage.getItem('userEmail');
                if (savedEmail) {
                    const userEmail = document.getElementById('userEmail');
                    if (userEmail) userEmail.value = savedEmail;
                }

                // Проверяем авторизацию пользователя
                const currentUser = JSON.parse(localStorage.getItem('currentUser'));
                if (currentUser && currentUser.email) {
                    updateUserUI(currentUser.email);
                }

                // Запускаем проверку алертов каждые 2 секунды
                setInterval(checkAlerts, 2000);
            } catch (error) {
                console.error('Failed to initialize application:', error);
                showNotification('Critical Error', 'Failed to connect to Binance API');
            }
        });

        // Глобальный обработчик ошибок
        window.addEventListener('error', (event) => {
            console.error('Global error:', event.error);
            showNotification('System Error', event.message || 'Unknown error occurred');
        });

        window.createAlertForSymbol = createAlertForSymbol;
        window.deleteAlert = deleteAlert;
        window.applyCurrentPrice = applyCurrentPrice;
        window.applyCurrentPriceForEdit = applyCurrentPriceForEdit;
        window.editAlert = editAlert;
        window.closeEditModal = closeEditModal;
        window.openTelegramSettings = openTelegramSettings;
        window.closeTelegramSettings = closeTelegramSettings;
        window.saveTelegramSettings = saveTelegramSettings;
        window.showBotConnectionHint = showBotConnectionHint;
        window.closeBotConnectionHint = closeBotConnectionHint;
        window.showHome = showHome;
        window.showLoginForm = showLoginForm;
        window.closeLoginModal = closeLoginModal;
        window.showRegisterForm = showRegisterForm;
        window.closeRegisterModal = closeRegisterModal;
        window.handleLogin = handleLogin;
        window.handleRegister = handleRegister;
        window.handleLogout = handleLogout;
        window.toggleMenu = toggleMenu;
        window.resetForm = resetForm;
        window.calculateAverage = calculateAverage;
    </script>
</body>
</html>
